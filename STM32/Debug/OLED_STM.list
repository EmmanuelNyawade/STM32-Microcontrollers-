
OLED_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a9c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  08002c30  08002c30  00003c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b0  080039b0  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b8  080039b8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080039c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000014  080039d4  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080039d4  000054b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bf3  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001726  00000000  00000000  0000cc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060a  00000000  00000000  0000eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156c2  00000000  00000000  0000f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a769  00000000  00000000  0002480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849f8  00000000  00000000  0002ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b396d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb4  00000000  00000000  000b39b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b5964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c18 	.word	0x08002c18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08002c18 	.word	0x08002c18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fdf3 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f841 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8cd 	bl	8000670 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f89d 	bl	8000614 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80004da:	f000 fa47 	bl	800096c <SSD1306_Init>
//    char snum[5];

    SSD1306_GotoXY (0,0);
 80004de:	2100      	movs	r1, #0
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 fbad 	bl	8000c40 <SSD1306_GotoXY>
    SSD1306_Puts ("Enter PIN", &Font_11x18, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	4916      	ldr	r1, [pc, #88]	@ (8000544 <main+0x80>)
 80004ea:	4817      	ldr	r0, [pc, #92]	@ (8000548 <main+0x84>)
 80004ec:	f000 fc3c 	bl	8000d68 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80004f0:	f000 fb00 	bl	8000af4 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f8:	f000 fe4e 	bl	8001198 <HAL_Delay>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4812      	ldr	r0, [pc, #72]	@ (800054c <main+0x88>)
 8000502:	f001 f91b 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000506:	2201      	movs	r2, #1
 8000508:	2101      	movs	r1, #1
 800050a:	4810      	ldr	r0, [pc, #64]	@ (800054c <main+0x88>)
 800050c:	f001 f916 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	480d      	ldr	r0, [pc, #52]	@ (800054c <main+0x88>)
 8000516:	f001 f911 	bl	800173c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 char digit = (char)keyPressed;
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <main+0x8c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
		SSD1306_GotoXY(0, 30);
 8000520:	211e      	movs	r1, #30
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fb8c 	bl	8000c40 <SSD1306_GotoXY>
		SSD1306_Putc(digit, &Font_11x18, 1);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2201      	movs	r2, #1
 800052c:	4905      	ldr	r1, [pc, #20]	@ (8000544 <main+0x80>)
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb9c 	bl	8000c6c <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000534:	f000 fade 	bl	8000af4 <SSD1306_UpdateScreen>
		HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053c:	f000 fe2c 	bl	8001198 <HAL_Delay>
  {
 8000540:	bf00      	nop
 8000542:	e7ea      	b.n	800051a <main+0x56>
 8000544:	20000000 	.word	0x20000000
 8000548:	08002c30 	.word	0x08002c30
 800054c:	40020000 	.word	0x40020000
 8000550:	200000a0 	.word	0x200000a0

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fb2c 	bl	8002bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a22      	ldr	r2, [pc, #136]	@ (800060c <SystemClock_Config+0xb8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <SystemClock_Config+0xb8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <SystemClock_Config+0xbc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <SystemClock_Config+0xbc>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <SystemClock_Config+0xbc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 feb5 	bl	8002338 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d4:	f000 f9c4 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f918 	bl	8002828 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fe:	f000 f9af 	bl	8000960 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f001 f8a5 	bl	80017a0 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f980 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000030 	.word	0x20000030
 8000668:	40005400 	.word	0x40005400
 800066c:	00061a80 	.word	0x00061a80

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xa8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <MX_GPIO_Init+0xa8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_GPIO_Init+0xa8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_GPIO_Init+0xa8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xa8>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <MX_GPIO_Init+0xa8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2115      	movs	r1, #21
 80006c2:	4816      	ldr	r0, [pc, #88]	@ (800071c <MX_GPIO_Init+0xac>)
 80006c4:	f001 f83a 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 80006c8:	2315      	movs	r3, #21
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480f      	ldr	r0, [pc, #60]	@ (800071c <MX_GPIO_Init+0xac>)
 80006e0:	f000 fe90 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80006e4:	236a      	movs	r3, #106	@ 0x6a
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <MX_GPIO_Init+0xac>)
 80006fa:	f000 fe83 	bl	8001404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2017      	movs	r0, #23
 8000704:	f000 fe47 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000708:	2017      	movs	r0, #23
 800070a:	f000 fe60 	bl	80013ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000

08000720 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 800072a:	f000 fd29 	bl	8001180 <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	4a86      	ldr	r2, [pc, #536]	@ (800094c <HAL_GPIO_EXTI_Callback+0x22c>)
 8000732:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000734:	4b85      	ldr	r3, [pc, #532]	@ (800094c <HAL_GPIO_EXTI_Callback+0x22c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b85      	ldr	r3, [pc, #532]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x230>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	2b0a      	cmp	r3, #10
 8000740:	f240 8100 	bls.w	8000944 <HAL_GPIO_EXTI_Callback+0x224>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000744:	4b83      	ldr	r3, [pc, #524]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000746:	226a      	movs	r2, #106	@ 0x6a
 8000748:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800074a:	4b82      	ldr	r3, [pc, #520]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	4b7f      	ldr	r3, [pc, #508]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 800075c:	497d      	ldr	r1, [pc, #500]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 800075e:	487e      	ldr	r0, [pc, #504]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000760:	f000 fe50 	bl	8001404 <HAL_GPIO_Init>




    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	487b      	ldr	r0, [pc, #492]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800076a:	f000 ffe7 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	4879      	ldr	r0, [pc, #484]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000774:	f000 ffe2 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	4876      	ldr	r0, [pc, #472]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800077e:	f000 ffdd 	bl	800173c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2b08      	cmp	r3, #8
 8000786:	d10a      	bne.n	800079e <HAL_GPIO_EXTI_Callback+0x7e>
 8000788:	2108      	movs	r1, #8
 800078a:	4873      	ldr	r0, [pc, #460]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800078c:	f000 ffbe 	bl	800170c <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <HAL_GPIO_EXTI_Callback+0x7e>
    {
      keyPressed = 35; //ASCII value of #
 8000796:	4b71      	ldr	r3, [pc, #452]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 8000798:	2223      	movs	r2, #35	@ 0x23
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e028      	b.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b20      	cmp	r3, #32
 80007a2:	d10a      	bne.n	80007ba <HAL_GPIO_EXTI_Callback+0x9a>
 80007a4:	2120      	movs	r1, #32
 80007a6:	486c      	ldr	r0, [pc, #432]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80007a8:	f000 ffb0 	bl	800170c <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_EXTI_Callback+0x9a>
    {
      keyPressed = 57; //ASCII value of 9
 80007b2:	4b6a      	ldr	r3, [pc, #424]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80007b4:	2239      	movs	r2, #57	@ 0x39
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e01a      	b.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	2b40      	cmp	r3, #64	@ 0x40
 80007be:	d10a      	bne.n	80007d6 <HAL_GPIO_EXTI_Callback+0xb6>
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	4865      	ldr	r0, [pc, #404]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80007c4:	f000 ffa2 	bl	800170c <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <HAL_GPIO_EXTI_Callback+0xb6>
    {
      keyPressed = 54; //ASCII value of 6
 80007ce:	4b63      	ldr	r3, [pc, #396]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80007d0:	2236      	movs	r2, #54	@ 0x36
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e00c      	b.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d109      	bne.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
 80007dc:	2102      	movs	r1, #2
 80007de:	485e      	ldr	r0, [pc, #376]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80007e0:	f000 ff94 	bl	800170c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      keyPressed = 51; //ASCII value of 3
 80007ea:	4b5c      	ldr	r3, [pc, #368]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80007ec:	2233      	movs	r2, #51	@ 0x33
 80007ee:	701a      	strb	r2, [r3, #0]
    }


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	4858      	ldr	r0, [pc, #352]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80007f6:	f000 ffa1 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	4856      	ldr	r0, [pc, #344]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000800:	f000 ff9c 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	4853      	ldr	r0, [pc, #332]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800080a:	f000 ff97 	bl	800173c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b08      	cmp	r3, #8
 8000812:	d10a      	bne.n	800082a <HAL_GPIO_EXTI_Callback+0x10a>
 8000814:	2108      	movs	r1, #8
 8000816:	4850      	ldr	r0, [pc, #320]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000818:	f000 ff78 	bl	800170c <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <HAL_GPIO_EXTI_Callback+0x10a>
    {
      keyPressed = 48; //ASCII value of 0
 8000822:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 8000824:	2230      	movs	r2, #48	@ 0x30
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e028      	b.n	800087c <HAL_GPIO_EXTI_Callback+0x15c>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b20      	cmp	r3, #32
 800082e:	d10a      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0x126>
 8000830:	2120      	movs	r1, #32
 8000832:	4849      	ldr	r0, [pc, #292]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000834:	f000 ff6a 	bl	800170c <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_EXTI_Callback+0x126>
    {
      keyPressed = 56; //ASCII value of 8
 800083e:	4b47      	ldr	r3, [pc, #284]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 8000840:	2238      	movs	r2, #56	@ 0x38
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e01a      	b.n	800087c <HAL_GPIO_EXTI_Callback+0x15c>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	2b40      	cmp	r3, #64	@ 0x40
 800084a:	d10a      	bne.n	8000862 <HAL_GPIO_EXTI_Callback+0x142>
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4842      	ldr	r0, [pc, #264]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000850:	f000 ff5c 	bl	800170c <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_EXTI_Callback+0x142>
    {
      keyPressed = 53; //ASCII value of 5
 800085a:	4b40      	ldr	r3, [pc, #256]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 800085c:	2235      	movs	r2, #53	@ 0x35
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	e00c      	b.n	800087c <HAL_GPIO_EXTI_Callback+0x15c>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d109      	bne.n	800087c <HAL_GPIO_EXTI_Callback+0x15c>
 8000868:	2102      	movs	r1, #2
 800086a:	483b      	ldr	r0, [pc, #236]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800086c:	f000 ff4e 	bl	800170c <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <HAL_GPIO_EXTI_Callback+0x15c>
    {
      keyPressed = 50; //ASCII value of 2
 8000876:	4b39      	ldr	r3, [pc, #228]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 8000878:	2232      	movs	r2, #50	@ 0x32
 800087a:	701a      	strb	r2, [r3, #0]
    }


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4835      	ldr	r0, [pc, #212]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000882:	f000 ff5b 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	4833      	ldr	r0, [pc, #204]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800088c:	f000 ff56 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2104      	movs	r1, #4
 8000894:	4830      	ldr	r0, [pc, #192]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000896:	f000 ff51 	bl	800173c <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	2b08      	cmp	r3, #8
 800089e:	d10a      	bne.n	80008b6 <HAL_GPIO_EXTI_Callback+0x196>
 80008a0:	2108      	movs	r1, #8
 80008a2:	482d      	ldr	r0, [pc, #180]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80008a4:	f000 ff32 	bl	800170c <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d003      	beq.n	80008b6 <HAL_GPIO_EXTI_Callback+0x196>
    {
      keyPressed = 42; //ASCII value of *
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80008b0:	222a      	movs	r2, #42	@ 0x2a
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e028      	b.n	8000908 <HAL_GPIO_EXTI_Callback+0x1e8>
    }
    else if(GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b20      	cmp	r3, #32
 80008ba:	d10a      	bne.n	80008d2 <HAL_GPIO_EXTI_Callback+0x1b2>
 80008bc:	2120      	movs	r1, #32
 80008be:	4826      	ldr	r0, [pc, #152]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80008c0:	f000 ff24 	bl	800170c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_EXTI_Callback+0x1b2>
    {
      keyPressed = 55; //ASCII value of 7
 80008ca:	4b24      	ldr	r3, [pc, #144]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80008cc:	2237      	movs	r2, #55	@ 0x37
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e01a      	b.n	8000908 <HAL_GPIO_EXTI_Callback+0x1e8>
    }
    else if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	2b40      	cmp	r3, #64	@ 0x40
 80008d6:	d10a      	bne.n	80008ee <HAL_GPIO_EXTI_Callback+0x1ce>
 80008d8:	2140      	movs	r1, #64	@ 0x40
 80008da:	481f      	ldr	r0, [pc, #124]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80008dc:	f000 ff16 	bl	800170c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_EXTI_Callback+0x1ce>
    {
      keyPressed = 52; //ASCII value of 4
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 80008e8:	2234      	movs	r2, #52	@ 0x34
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e00c      	b.n	8000908 <HAL_GPIO_EXTI_Callback+0x1e8>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d109      	bne.n	8000908 <HAL_GPIO_EXTI_Callback+0x1e8>
 80008f4:	2102      	movs	r1, #2
 80008f6:	4818      	ldr	r0, [pc, #96]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 80008f8:	f000 ff08 	bl	800170c <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <HAL_GPIO_EXTI_Callback+0x1e8>
    {
      keyPressed = 49; //ASCII value of 1
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <HAL_GPIO_EXTI_Callback+0x23c>)
 8000904:	2231      	movs	r2, #49	@ 0x31
 8000906:	701a      	strb	r2, [r3, #0]
    }


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	4812      	ldr	r0, [pc, #72]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 800090e:	f000 ff15 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	4810      	ldr	r0, [pc, #64]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000918:	f000 ff10 	bl	800173c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2104      	movs	r1, #4
 8000920:	480d      	ldr	r0, [pc, #52]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000922:	f000 ff0b 	bl	800173c <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000928:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
 800092c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000930:	2202      	movs	r2, #2
 8000932:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000934:	4907      	ldr	r1, [pc, #28]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x234>)
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x238>)
 8000938:	f000 fd64 	bl	8001404 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GPIO_EXTI_Callback+0x22c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a03      	ldr	r2, [pc, #12]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x230>)
 8000942:	6013      	str	r3, [r2, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000009c 	.word	0x2000009c
 8000950:	20000098 	.word	0x20000098
 8000954:	20000084 	.word	0x20000084
 8000958:	40020000 	.word	0x40020000
 800095c:	200000a0 	.word	0x200000a0

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000972:	f000 fa1f 	bl	8000db4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000976:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800097a:	2201      	movs	r2, #1
 800097c:	2178      	movs	r1, #120	@ 0x78
 800097e:	485b      	ldr	r0, [pc, #364]	@ (8000aec <SSD1306_Init+0x180>)
 8000980:	f001 f950 	bl	8001c24 <HAL_I2C_IsDeviceReady>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800098a:	2300      	movs	r3, #0
 800098c:	e0a9      	b.n	8000ae2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800098e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000992:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000994:	e002      	b.n	800099c <SSD1306_Init+0x30>
		p--;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f9      	bne.n	8000996 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009a2:	22ae      	movs	r2, #174	@ 0xae
 80009a4:	2100      	movs	r1, #0
 80009a6:	2078      	movs	r0, #120	@ 0x78
 80009a8:	f000 fa80 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80009ac:	2220      	movs	r2, #32
 80009ae:	2100      	movs	r1, #0
 80009b0:	2078      	movs	r0, #120	@ 0x78
 80009b2:	f000 fa7b 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009b6:	2210      	movs	r2, #16
 80009b8:	2100      	movs	r1, #0
 80009ba:	2078      	movs	r0, #120	@ 0x78
 80009bc:	f000 fa76 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009c0:	22b0      	movs	r2, #176	@ 0xb0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2078      	movs	r0, #120	@ 0x78
 80009c6:	f000 fa71 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009ca:	22c8      	movs	r2, #200	@ 0xc8
 80009cc:	2100      	movs	r1, #0
 80009ce:	2078      	movs	r0, #120	@ 0x78
 80009d0:	f000 fa6c 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2078      	movs	r0, #120	@ 0x78
 80009da:	f000 fa67 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009de:	2210      	movs	r2, #16
 80009e0:	2100      	movs	r1, #0
 80009e2:	2078      	movs	r0, #120	@ 0x78
 80009e4:	f000 fa62 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80009e8:	2240      	movs	r2, #64	@ 0x40
 80009ea:	2100      	movs	r1, #0
 80009ec:	2078      	movs	r0, #120	@ 0x78
 80009ee:	f000 fa5d 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80009f2:	2281      	movs	r2, #129	@ 0x81
 80009f4:	2100      	movs	r1, #0
 80009f6:	2078      	movs	r0, #120	@ 0x78
 80009f8:	f000 fa58 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80009fc:	22ff      	movs	r2, #255	@ 0xff
 80009fe:	2100      	movs	r1, #0
 8000a00:	2078      	movs	r0, #120	@ 0x78
 8000a02:	f000 fa53 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a06:	22a1      	movs	r2, #161	@ 0xa1
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2078      	movs	r0, #120	@ 0x78
 8000a0c:	f000 fa4e 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a10:	22a6      	movs	r2, #166	@ 0xa6
 8000a12:	2100      	movs	r1, #0
 8000a14:	2078      	movs	r0, #120	@ 0x78
 8000a16:	f000 fa49 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a1a:	22a8      	movs	r2, #168	@ 0xa8
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2078      	movs	r0, #120	@ 0x78
 8000a20:	f000 fa44 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a24:	223f      	movs	r2, #63	@ 0x3f
 8000a26:	2100      	movs	r1, #0
 8000a28:	2078      	movs	r0, #120	@ 0x78
 8000a2a:	f000 fa3f 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a2e:	22a4      	movs	r2, #164	@ 0xa4
 8000a30:	2100      	movs	r1, #0
 8000a32:	2078      	movs	r0, #120	@ 0x78
 8000a34:	f000 fa3a 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a38:	22d3      	movs	r2, #211	@ 0xd3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2078      	movs	r0, #120	@ 0x78
 8000a3e:	f000 fa35 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2078      	movs	r0, #120	@ 0x78
 8000a48:	f000 fa30 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a4c:	22d5      	movs	r2, #213	@ 0xd5
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2078      	movs	r0, #120	@ 0x78
 8000a52:	f000 fa2b 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a56:	22f0      	movs	r2, #240	@ 0xf0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2078      	movs	r0, #120	@ 0x78
 8000a5c:	f000 fa26 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a60:	22d9      	movs	r2, #217	@ 0xd9
 8000a62:	2100      	movs	r1, #0
 8000a64:	2078      	movs	r0, #120	@ 0x78
 8000a66:	f000 fa21 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a6a:	2222      	movs	r2, #34	@ 0x22
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2078      	movs	r0, #120	@ 0x78
 8000a70:	f000 fa1c 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a74:	22da      	movs	r2, #218	@ 0xda
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	@ 0x78
 8000a7a:	f000 fa17 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a7e:	2212      	movs	r2, #18
 8000a80:	2100      	movs	r1, #0
 8000a82:	2078      	movs	r0, #120	@ 0x78
 8000a84:	f000 fa12 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a88:	22db      	movs	r2, #219	@ 0xdb
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2078      	movs	r0, #120	@ 0x78
 8000a8e:	f000 fa0d 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	2078      	movs	r0, #120	@ 0x78
 8000a98:	f000 fa08 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a9c:	228d      	movs	r2, #141	@ 0x8d
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2078      	movs	r0, #120	@ 0x78
 8000aa2:	f000 fa03 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000aa6:	2214      	movs	r2, #20
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2078      	movs	r0, #120	@ 0x78
 8000aac:	f000 f9fe 	bl	8000eac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ab0:	22af      	movs	r2, #175	@ 0xaf
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2078      	movs	r0, #120	@ 0x78
 8000ab6:	f000 f9f9 	bl	8000eac <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000aba:	222e      	movs	r2, #46	@ 0x2e
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	@ 0x78
 8000ac0:	f000 f9f4 	bl	8000eac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f843 	bl	8000b50 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000aca:	f000 f813 	bl	8000af4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <SSD1306_Init+0x184>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SSD1306_Init+0x184>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <SSD1306_Init+0x184>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000030 	.word	0x20000030
 8000af0:	200004a4 	.word	0x200004a4

08000af4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	e01d      	b.n	8000b3c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	3b50      	subs	r3, #80	@ 0x50
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2078      	movs	r0, #120	@ 0x78
 8000b0c:	f000 f9ce 	bl	8000eac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	@ 0x78
 8000b16:	f000 f9c9 	bl	8000eac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2078      	movs	r0, #120	@ 0x78
 8000b20:	f000 f9c4 	bl	8000eac <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <SSD1306_UpdateScreen+0x58>)
 8000b2a:	441a      	add	r2, r3
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	2140      	movs	r1, #64	@ 0x40
 8000b30:	2078      	movs	r0, #120	@ 0x78
 8000b32:	f000 f955 	bl	8000de0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d9de      	bls.n	8000b00 <SSD1306_UpdateScreen+0xc>
	}
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000a4 	.word	0x200000a4

08000b50 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <SSD1306_Fill+0x14>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <SSD1306_Fill+0x16>
 8000b64:	23ff      	movs	r3, #255	@ 0xff
 8000b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <SSD1306_Fill+0x2c>)
 8000b6e:	f002 f827 	bl	8002bc0 <memset>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000a4 	.word	0x200000a4

08000b80 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	70fb      	strb	r3, [r7, #3]
	if (
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b96:	d848      	bhi.n	8000c2a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b9c:	d845      	bhi.n	8000c2a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <SSD1306_DrawPixel+0xb8>)
 8000ba0:	791b      	ldrb	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf0c      	ite	eq
 8000bac:	2301      	moveq	r3, #1
 8000bae:	2300      	movne	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d11a      	bne.n	8000bf0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	01db      	lsls	r3, r3, #7
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <SSD1306_DrawPixel+0xbc>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b259      	sxtb	r1, r3
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	4603      	mov	r3, r0
 8000be4:	01db      	lsls	r3, r3, #7
 8000be6:	4413      	add	r3, r2
 8000be8:	b2c9      	uxtb	r1, r1
 8000bea:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <SSD1306_DrawPixel+0xbc>)
 8000bec:	54d1      	strb	r1, [r2, r3]
 8000bee:	e01d      	b.n	8000c2c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	88bb      	ldrh	r3, [r7, #4]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	b298      	uxth	r0, r3
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <SSD1306_DrawPixel+0xbc>)
 8000c00:	5cd3      	ldrb	r3, [r2, r3]
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	4013      	ands	r3, r2
 8000c18:	b259      	sxtb	r1, r3
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	01db      	lsls	r3, r3, #7
 8000c20:	4413      	add	r3, r2
 8000c22:	b2c9      	uxtb	r1, r1
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SSD1306_DrawPixel+0xbc>)
 8000c26:	54d1      	strb	r1, [r2, r3]
 8000c28:	e000      	b.n	8000c2c <SSD1306_DrawPixel+0xac>
		return;
 8000c2a:	bf00      	nop
	}
}
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200004a4 	.word	0x200004a4
 8000c3c:	200000a4 	.word	0x200000a4

08000c40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SSD1306_GotoXY+0x28>)
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <SSD1306_GotoXY+0x28>)
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	8053      	strh	r3, [r2, #2]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	200004a4 	.word	0x200004a4

08000c6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
	if (
 8000c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c8a:	dc07      	bgt.n	8000c9c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c8c:	4b35      	ldr	r3, [pc, #212]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000c8e:	885b      	ldrh	r3, [r3, #2]
 8000c90:	461a      	mov	r2, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c9a:	dd01      	ble.n	8000ca0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e05d      	b.n	8000d5c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e04b      	b.n	8000d3e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	3b20      	subs	r3, #32
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	7849      	ldrb	r1, [r1, #1]
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	440b      	add	r3, r1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	e030      	b.n	8000d2c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d010      	beq.n	8000cfc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cda:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000ce8:	885a      	ldrh	r2, [r3, #2]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f7ff ff43 	bl	8000b80 <SSD1306_DrawPixel>
 8000cfa:	e014      	b.n	8000d26 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	b298      	uxth	r0, r3
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000d0a:	885a      	ldrh	r2, [r3, #2]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	4413      	add	r3, r2
 8000d12:	b299      	uxth	r1, r3
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	f7ff ff2d 	bl	8000b80 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d3c8      	bcc.n	8000cca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	461a      	mov	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d3ad      	bcc.n	8000ca6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SSD1306_Putc+0xf8>)
 8000d58:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200004a4 	.word	0x200004a4

08000d68 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	4613      	mov	r3, r2
 8000d74:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d76:	e012      	b.n	8000d9e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff73 	bl	8000c6c <SSD1306_Putc>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d002      	beq.n	8000d98 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	e008      	b.n	8000daa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1e8      	bne.n	8000d78 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	781b      	ldrb	r3, [r3, #0]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <ssd1306_I2C_Init+0x28>)
 8000dbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dbe:	e002      	b.n	8000dc6 <ssd1306_I2C_Init+0x12>
		p--;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f9      	bne.n	8000dc0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	0003d090 	.word	0x0003d090

08000de0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b0c7      	sub	sp, #284	@ 0x11c
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000dee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000df2:	600a      	str	r2, [r1, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dfa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000dfe:	4622      	mov	r2, r4
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e06:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e16:	460a      	mov	r2, r1
 8000e18:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e26:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e34:	e015      	b.n	8000e62 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e36:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e3e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	441a      	add	r2, r3
 8000e46:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	7811      	ldrb	r1, [r2, #0]
 8000e4e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e52:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000e56:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e58:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e62:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e6c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e70:	8812      	ldrh	r2, [r2, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8df      	bhi.n	8000e36 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e7a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b299      	uxth	r1, r3
 8000e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	200a      	movs	r0, #10
 8000e96:	9000      	str	r0, [sp, #0]
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e9a:	f000 fdc5 	bl	8001a28 <HAL_I2C_Master_Transmit>
}
 8000e9e:	bf00      	nop
 8000ea0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	20000030 	.word	0x20000030

08000eac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	71bb      	strb	r3, [r7, #6]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ec2:	797b      	ldrb	r3, [r7, #5]
 8000ec4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	b299      	uxth	r1, r3
 8000eca:	f107 020c 	add.w	r2, r7, #12
 8000ece:	230a      	movs	r3, #10
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <ssd1306_I2C_Write+0x38>)
 8000ed6:	f000 fda7 	bl	8001a28 <HAL_I2C_Master_Transmit>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000030 	.word	0x20000030

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <HAL_I2C_MspInit+0x84>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12b      	bne.n	8000fb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23c0      	movs	r3, #192	@ 0xc0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f86:	2304      	movs	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <HAL_I2C_MspInit+0x8c>)
 8000f92:	f000 fa37 	bl	8001404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000fa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_I2C_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020400 	.word	0x40020400

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 f89b 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800102a:	2020      	movs	r0, #32
 800102c:	f000 fba0 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001030:	2040      	movs	r0, #64	@ 0x40
 8001032:	f000 fb9d 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	@ (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	@ (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	@ (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f001 fd9f 	bl	8002bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa17 	bl	80004c4 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010a4:	080039c0 	.word	0x080039c0
  ldr r2, =_sbss
 80010a8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010ac:	200004b0 	.word	0x200004b0

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f94f 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fefe 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f967 	bl	80013ea <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f92f 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000008 	.word	0x20000008
 8001150:	20000010 	.word	0x20000010
 8001154:	2000000c 	.word	0x2000000c

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010
 800117c:	200004ac 	.word	0x200004ac

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200004ac 	.word	0x200004ac

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000010 	.word	0x20000010

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e159      	b.n	80016d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8148 	bne.w	80016ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a2 	beq.w	80016ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b57      	ldr	r3, [pc, #348]	@ (80016ec <HAL_GPIO_Init+0x2e8>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a56      	ldr	r2, [pc, #344]	@ (80016ec <HAL_GPIO_Init+0x2e8>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <HAL_GPIO_Init+0x2e8>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a52      	ldr	r2, [pc, #328]	@ (80016f0 <HAL_GPIO_Init+0x2ec>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a49      	ldr	r2, [pc, #292]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d019      	beq.n	8001606 <HAL_GPIO_Init+0x202>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a48      	ldr	r2, [pc, #288]	@ (80016f8 <HAL_GPIO_Init+0x2f4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0x1fe>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a47      	ldr	r2, [pc, #284]	@ (80016fc <HAL_GPIO_Init+0x2f8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x1fa>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a46      	ldr	r2, [pc, #280]	@ (8001700 <HAL_GPIO_Init+0x2fc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x1f6>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a45      	ldr	r2, [pc, #276]	@ (8001704 <HAL_GPIO_Init+0x300>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x1f2>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x204>
 80015f6:	2307      	movs	r3, #7
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x204>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x204>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x204>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x204>
 8001606:	2300      	movs	r3, #0
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001618:	4935      	ldr	r1, [pc, #212]	@ (80016f0 <HAL_GPIO_Init+0x2ec>)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <HAL_GPIO_Init+0x304>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164a:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <HAL_GPIO_Init+0x304>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_GPIO_Init+0x304>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001674:	4a24      	ldr	r2, [pc, #144]	@ (8001708 <HAL_GPIO_Init+0x304>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <HAL_GPIO_Init+0x304>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800169e:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <HAL_GPIO_Init+0x304>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_GPIO_Init+0x304>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001708 <HAL_GPIO_Init+0x304>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	f67f aea2 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40021000 	.word	0x40021000
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e001      	b.n	800172e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe ffc6 	bl	8000720 <HAL_GPIO_EXTI_Callback>
  }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e12b      	b.n	8001a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fbb6 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2224      	movs	r2, #36	@ 0x24
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001804:	f001 f9c8 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8001808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a81      	ldr	r2, [pc, #516]	@ (8001a14 <HAL_I2C_Init+0x274>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d807      	bhi.n	8001824 <HAL_I2C_Init+0x84>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a80      	ldr	r2, [pc, #512]	@ (8001a18 <HAL_I2C_Init+0x278>)
 8001818:	4293      	cmp	r3, r2
 800181a:	bf94      	ite	ls
 800181c:	2301      	movls	r3, #1
 800181e:	2300      	movhi	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	e006      	b.n	8001832 <HAL_I2C_Init+0x92>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a7d      	ldr	r2, [pc, #500]	@ (8001a1c <HAL_I2C_Init+0x27c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0e7      	b.n	8001a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a78      	ldr	r2, [pc, #480]	@ (8001a20 <HAL_I2C_Init+0x280>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9b      	lsrs	r3, r3, #18
 8001844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a6a      	ldr	r2, [pc, #424]	@ (8001a14 <HAL_I2C_Init+0x274>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d802      	bhi.n	8001874 <HAL_I2C_Init+0xd4>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	e009      	b.n	8001888 <HAL_I2C_Init+0xe8>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	4a69      	ldr	r2, [pc, #420]	@ (8001a24 <HAL_I2C_Init+0x284>)
 8001880:	fba2 2303 	umull	r2, r3, r2, r3
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	3301      	adds	r3, #1
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	430b      	orrs	r3, r1
 800188e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800189a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	495c      	ldr	r1, [pc, #368]	@ (8001a14 <HAL_I2C_Init+0x274>)
 80018a4:	428b      	cmp	r3, r1
 80018a6:	d819      	bhi.n	80018dc <HAL_I2C_Init+0x13c>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e59      	subs	r1, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b6:	1c59      	adds	r1, r3, #1
 80018b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018bc:	400b      	ands	r3, r1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <HAL_I2C_Init+0x138>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e59      	subs	r1, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d6:	e051      	b.n	800197c <HAL_I2C_Init+0x1dc>
 80018d8:	2304      	movs	r3, #4
 80018da:	e04f      	b.n	800197c <HAL_I2C_Init+0x1dc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_I2C_Init+0x168>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	440b      	add	r3, r1
 80018f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	e012      	b.n	800192e <HAL_I2C_Init+0x18e>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Init+0x196>
 8001932:	2301      	movs	r3, #1
 8001934:	e022      	b.n	800197c <HAL_I2C_Init+0x1dc>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <HAL_I2C_Init+0x1bc>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e58      	subs	r0, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6859      	ldr	r1, [r3, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	440b      	add	r3, r1
 800194c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001950:	3301      	adds	r3, #1
 8001952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800195a:	e00f      	b.n	800197c <HAL_I2C_Init+0x1dc>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	0099      	lsls	r1, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	6809      	ldr	r1, [r1, #0]
 8001980:	4313      	orrs	r3, r2
 8001982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6911      	ldr	r1, [r2, #16]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68d2      	ldr	r2, [r2, #12]
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	000186a0 	.word	0x000186a0
 8001a18:	001e847f 	.word	0x001e847f
 8001a1c:	003d08ff 	.word	0x003d08ff
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	10624dd3 	.word	0x10624dd3

08001a28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	461a      	mov	r2, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	817b      	strh	r3, [r7, #10]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff fba0 	bl	8001180 <HAL_GetTick>
 8001a40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	f040 80e0 	bne.w	8001c10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2319      	movs	r3, #25
 8001a56:	2201      	movs	r2, #1
 8001a58:	4970      	ldr	r1, [pc, #448]	@ (8001c1c <HAL_I2C_Master_Transmit+0x1f4>)
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fa92 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
 8001a68:	e0d3      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2C_Master_Transmit+0x50>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e0cc      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d007      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2221      	movs	r2, #33	@ 0x21
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	893a      	ldrh	r2, [r7, #8]
 8001ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ade:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f9ca 	bl	8001e80 <I2C_MasterRequestWrite>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e08d      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b0c:	e066      	b.n	8001bdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	6a39      	ldr	r1, [r7, #32]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fb50 	bl	80021b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d107      	bne.n	8001b36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06b      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d11b      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x188>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d017      	beq.n	8001bb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	6a39      	ldr	r1, [r7, #32]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb47 	bl	8002248 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00d      	beq.n	8001bdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d107      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e01a      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d194      	bne.n	8001b0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	00100002 	.word	0x00100002
 8001c20:	ffff0000 	.word	0xffff0000

08001c24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	460b      	mov	r3, r1
 8001c32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff faa4 	bl	8001180 <HAL_GetTick>
 8001c38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	f040 8111 	bne.w	8001e6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2319      	movs	r3, #25
 8001c52:	2201      	movs	r2, #1
 8001c54:	4988      	ldr	r1, [pc, #544]	@ (8001e78 <HAL_I2C_IsDeviceReady+0x254>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f994 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e104      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_I2C_IsDeviceReady+0x50>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0fd      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d007      	beq.n	8001c9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2224      	movs	r2, #36	@ 0x24
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a70      	ldr	r2, [pc, #448]	@ (8001e7c <HAL_I2C_IsDeviceReady+0x258>)
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f952 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf4:	d103      	bne.n	8001cfe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0b6      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fa35 	bl	8001180 <HAL_GetTick>
 8001d16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d46:	e025      	b.n	8001d94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d48:	f7ff fa1a 	bl	8001180 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d302      	bcc.n	8001d5e <HAL_I2C_IsDeviceReady+0x13a>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22a0      	movs	r2, #160	@ 0xa0
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d9e:	d005      	beq.n	8001dac <HAL_I2C_IsDeviceReady+0x188>
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_I2C_IsDeviceReady+0x188>
 8001da6:	7dbb      	ldrb	r3, [r7, #22]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0cd      	beq.n	8001d48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d129      	bne.n	8001e16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	4921      	ldr	r1, [pc, #132]	@ (8001e78 <HAL_I2C_IsDeviceReady+0x254>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8c6 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e036      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e02c      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2319      	movs	r3, #25
 8001e36:	2201      	movs	r2, #1
 8001e38:	490f      	ldr	r1, [pc, #60]	@ (8001e78 <HAL_I2C_IsDeviceReady+0x254>)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8a2 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e012      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f4ff af32 	bcc.w	8001cbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	00100002 	.word	0x00100002
 8001e7c:	ffff0000 	.word	0xffff0000

08001e80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d006      	beq.n	8001eaa <I2C_MasterRequestWrite+0x2a>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d003      	beq.n	8001eaa <I2C_MasterRequestWrite+0x2a>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ea8:	d108      	bne.n	8001ebc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e00b      	b.n	8001ed4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d107      	bne.n	8001ed4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f84f 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efa:	d103      	bne.n	8001f04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e035      	b.n	8001f74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f10:	d108      	bne.n	8001f24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	e01b      	b.n	8001f5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	11db      	asrs	r3, r3, #7
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 0306 	and.w	r3, r3, #6
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f063 030f 	orn	r3, r3, #15
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <I2C_MasterRequestWrite+0xfc>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f898 	bl	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e010      	b.n	8001f74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4907      	ldr	r1, [pc, #28]	@ (8001f80 <I2C_MasterRequestWrite+0x100>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f888 	bl	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	00010008 	.word	0x00010008
 8001f80:	00010002 	.word	0x00010002

08001f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f94:	e048      	b.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d044      	beq.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7ff f8ef 	bl	8001180 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d139      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10d      	bne.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	e00c      	b.n	8001ff4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d116      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e023      	b.n	8002070 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10d      	bne.n	800204e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	e00c      	b.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	43da      	mvns	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	429a      	cmp	r2, r3
 800206c:	d093      	beq.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002086:	e071      	b.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002096:	d123      	bne.n	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e067      	b.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d041      	beq.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e8:	f7ff f84a 	bl	8001180 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d136      	bne.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10c      	bne.n	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4013      	ands	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf14      	ite	ne
 800211a:	2301      	movne	r3, #1
 800211c:	2300      	moveq	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e00b      	b.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e021      	b.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	0c1b      	lsrs	r3, r3, #16
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10c      	bne.n	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	43da      	mvns	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e00b      	b.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f47f af6d 	bne.w	8002088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c4:	e034      	b.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f886 	bl	80022d8 <I2C_IsAcknowledgeFailed>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e034      	b.n	8002240 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d028      	beq.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7fe ffcf 	bl	8001180 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d11d      	bne.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fe:	2b80      	cmp	r3, #128	@ 0x80
 8002200:	d016      	beq.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e007      	b.n	8002240 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	2b80      	cmp	r3, #128	@ 0x80
 800223c:	d1c3      	bne.n	80021c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002254:	e034      	b.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f83e 	bl	80022d8 <I2C_IsAcknowledgeFailed>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e034      	b.n	80022d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d028      	beq.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7fe ff87 	bl	8001180 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11d      	bne.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d016      	beq.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d1c3      	bne.n	8002256 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ee:	d11b      	bne.n	8002328 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0204 	orr.w	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e267      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b82      	ldr	r3, [pc, #520]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b7e      	ldr	r3, [pc, #504]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e242      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b76      	ldr	r3, [pc, #472]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a75      	ldr	r2, [pc, #468]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b69      	ldr	r3, [pc, #420]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a68      	ldr	r2, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fec6 	bl	8001180 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fec2 	bl	8001180 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e207      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe feb2 	bl	8001180 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe feae 	bl	8001180 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f3      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c7      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4937      	ldr	r1, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fe67 	bl	8001180 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fe63 	bl	8001180 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a8      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4925      	ldr	r1, [pc, #148]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fe46 	bl	8001180 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fe42 	bl	8001180 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e187      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d036      	beq.n	8002590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fe26 	bl	8001180 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fe22 	bl	8001180 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e167      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e01b      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fe0f 	bl	8001180 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e00e      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fe0b 	bl	8001180 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d907      	bls.n	8002584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e150      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	42470000 	.word	0x42470000
 8002580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b88      	ldr	r3, [pc, #544]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ea      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8097 	beq.w	80026cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b81      	ldr	r3, [pc, #516]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b7d      	ldr	r3, [pc, #500]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a7c      	ldr	r2, [pc, #496]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b77      	ldr	r3, [pc, #476]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b74      	ldr	r3, [pc, #464]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a73      	ldr	r2, [pc, #460]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fdcb 	bl	8001180 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fdc7 	bl	8001180 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e10c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x2ea>
 8002614:	4b64      	ldr	r3, [pc, #400]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a63      	ldr	r2, [pc, #396]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x30c>
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a5e      	ldr	r2, [pc, #376]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002644:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a57      	ldr	r2, [pc, #348]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002650:	4b55      	ldr	r3, [pc, #340]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4a54      	ldr	r2, [pc, #336]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fd8c 	bl	8001180 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fd88 	bl	8001180 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0cb      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ee      	beq.n	800266c <HAL_RCC_OscConfig+0x334>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe fd76 	bl	8001180 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe fd72 	bl	8001180 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0b5      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ee      	bne.n	8002698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a1 	beq.w	8002818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d6:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d05c      	beq.n	800279c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d141      	bne.n	800276e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fd46 	bl	8001180 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe fd42 	bl	8001180 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e087      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	491b      	ldr	r1, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fd1b 	bl	8001180 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fd17 	bl	8001180 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e05c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x416>
 800276c:	e054      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fd04 	bl	8001180 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fd00 	bl	8001180 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e045      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x444>
 800279a:	e03d      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e038      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000
 80027b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d028      	beq.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d121      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d11a      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d111      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe fc32 	bl	8001180 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fc2e 	bl	8001180 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fb92 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08003998 	.word	0x08003998
 80029ec:	20000008 	.word	0x20000008
 80029f0:	2000000c 	.word	0x2000000c

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b090      	sub	sp, #64	@ 0x40
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80a1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e09b      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b53      	ldr	r3, [pc, #332]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002a2c:	e09b      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a32:	e098      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d028      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a60:	fb03 f201 	mul.w	r2, r3, r1
 8002a64:	2300      	movs	r3, #0
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a43      	ldr	r2, [pc, #268]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a74:	460a      	mov	r2, r1
 8002a76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7a:	4413      	add	r3, r2
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a80:	2200      	movs	r2, #0
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	61fa      	str	r2, [r7, #28]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a8e:	f7fd fba1 	bl	80001d4 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4613      	mov	r3, r2
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a9a:	e053      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	617a      	str	r2, [r7, #20]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aae:	f04f 0b00 	mov.w	fp, #0
 8002ab2:	4652      	mov	r2, sl
 8002ab4:	465b      	mov	r3, fp
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	ebb2 080a 	subs.w	r8, r2, sl
 8002ace:	eb63 090b 	sbc.w	r9, r3, fp
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8002aea:	eb63 0509 	sbc.w	r5, r3, r9
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	00eb      	lsls	r3, r5, #3
 8002af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afc:	00e2      	lsls	r2, r4, #3
 8002afe:	4614      	mov	r4, r2
 8002b00:	461d      	mov	r5, r3
 8002b02:	eb14 030a 	adds.w	r3, r4, sl
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	eb45 030b 	adc.w	r3, r5, fp
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b38:	f7fd fb4c 	bl	80001d4 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002b54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3740      	adds	r7, #64	@ 0x40
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	017d7840 	.word	0x017d7840

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a9b      	lsrs	r3, r3, #10
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	080039a8 	.word	0x080039a8

08002bc0 <memset>:
 8002bc0:	4402      	add	r2, r0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d100      	bne.n	8002bca <memset+0xa>
 8002bc8:	4770      	bx	lr
 8002bca:	f803 1b01 	strb.w	r1, [r3], #1
 8002bce:	e7f9      	b.n	8002bc4 <memset+0x4>

08002bd0 <__libc_init_array>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8002c08 <__libc_init_array+0x38>)
 8002bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8002c0c <__libc_init_array+0x3c>)
 8002bd6:	1b64      	subs	r4, r4, r5
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	2600      	movs	r6, #0
 8002bdc:	42a6      	cmp	r6, r4
 8002bde:	d109      	bne.n	8002bf4 <__libc_init_array+0x24>
 8002be0:	4d0b      	ldr	r5, [pc, #44]	@ (8002c10 <__libc_init_array+0x40>)
 8002be2:	4c0c      	ldr	r4, [pc, #48]	@ (8002c14 <__libc_init_array+0x44>)
 8002be4:	f000 f818 	bl	8002c18 <_init>
 8002be8:	1b64      	subs	r4, r4, r5
 8002bea:	10a4      	asrs	r4, r4, #2
 8002bec:	2600      	movs	r6, #0
 8002bee:	42a6      	cmp	r6, r4
 8002bf0:	d105      	bne.n	8002bfe <__libc_init_array+0x2e>
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf8:	4798      	blx	r3
 8002bfa:	3601      	adds	r6, #1
 8002bfc:	e7ee      	b.n	8002bdc <__libc_init_array+0xc>
 8002bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c02:	4798      	blx	r3
 8002c04:	3601      	adds	r6, #1
 8002c06:	e7f2      	b.n	8002bee <__libc_init_array+0x1e>
 8002c08:	080039b8 	.word	0x080039b8
 8002c0c:	080039b8 	.word	0x080039b8
 8002c10:	080039b8 	.word	0x080039b8
 8002c14:	080039bc 	.word	0x080039bc

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
