
Temperature Display and BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005900  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  08005aa0  08005aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006894  08006894  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800689c  0800689c  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080068a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000064  08006908  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08006908  000086ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108bd  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002413  00000000  00000000  00018951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc7  00000000  00000000  0001bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170fc  00000000  00000000  0001ca4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b0b  00000000  00000000  00033b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905f4  00000000  00000000  00047656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  000d7c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000dc7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a88 	.word	0x08005a88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005a88 	.word	0x08005a88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <microDelay+0x30>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000dce:	bf00      	nop
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <microDelay+0x30>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3f9      	bcc.n	8000dd0 <microDelay+0x14>
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000d4 	.word	0x200000d4

08000df0 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	482d      	ldr	r0, [pc, #180]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e20:	f001 fa5c 	bl	80022dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2a:	482a      	ldr	r0, [pc, #168]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e2c:	f001 fbf2 	bl	8002614 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000e30:	2014      	movs	r0, #20
 8000e32:	f001 f88b 	bl	8001f4c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	4825      	ldr	r0, [pc, #148]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e3e:	f001 fbe9 	bl	8002614 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000e42:	201e      	movs	r0, #30
 8000e44:	f7ff ffba 	bl	8000dbc <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e56:	f001 fa41 	bl	80022dc <HAL_GPIO_Init>
  microDelay (40);
 8000e5a:	2028      	movs	r0, #40	@ 0x28
 8000e5c:	f7ff ffae 	bl	8000dbc <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000e60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e64:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e66:	f001 fbbd 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10c      	bne.n	8000e8a <DHT11_Start+0x9a>
  {
    microDelay (80);
 8000e70:	2050      	movs	r0, #80	@ 0x50
 8000e72:	f7ff ffa3 	bl	8000dbc <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7a:	4816      	ldr	r0, [pc, #88]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000e7c:	f001 fbb2 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <DHT11_Start+0x9a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000e8a:	f001 f853 	bl	8001f34 <HAL_GetTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a11      	ldr	r2, [pc, #68]	@ (8000ed8 <DHT11_Start+0xe8>)
 8000e92:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000e94:	f001 f84e 	bl	8001f34 <HAL_GetTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <DHT11_Start+0xec>)
 8000e9c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e9e:	e004      	b.n	8000eaa <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8000ea0:	f001 f848 	bl	8001f34 <HAL_GetTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <DHT11_Start+0xec>)
 8000ea8:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eae:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <DHT11_Start+0xe4>)
 8000eb0:	f001 fb98 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <DHT11_Start+0xd8>
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <DHT11_Start+0xe8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1c9a      	adds	r2, r3, #2
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <DHT11_Start+0xec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8eb      	bhi.n	8000ea0 <DHT11_Start+0xb0>
  }
  return Response;
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	2000016c 	.word	0x2000016c
 8000edc:	20000170 	.word	0x20000170

08000ee0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	e066      	b.n	8000fba <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000eec:	f001 f822 	bl	8001f34 <HAL_GetTick>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a36      	ldr	r2, [pc, #216]	@ (8000fcc <DHT11_Read+0xec>)
 8000ef4:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ef6:	f001 f81d 	bl	8001f34 <HAL_GetTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000efe:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f00:	e004      	b.n	8000f0c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000f02:	f001 f817 	bl	8001f34 <HAL_GetTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000f0a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f10:	4830      	ldr	r0, [pc, #192]	@ (8000fd4 <DHT11_Read+0xf4>)
 8000f12:	f001 fb67 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d106      	bne.n	8000f2a <DHT11_Read+0x4a>
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <DHT11_Read+0xec>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1c9a      	adds	r2, r3, #2
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d8eb      	bhi.n	8000f02 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000f2a:	2028      	movs	r0, #40	@ 0x28
 8000f2c:	f7ff ff46 	bl	8000dbc <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000f30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f34:	4827      	ldr	r0, [pc, #156]	@ (8000fd4 <DHT11_Read+0xf4>)
 8000f36:	f001 fb55 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10e      	bne.n	8000f5e <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2201      	movs	r2, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f56:	4013      	ands	r3, r2
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	e00b      	b.n	8000f76 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f1c3 0307 	rsb	r3, r3, #7
 8000f64:	2201      	movs	r2, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000f76:	f000 ffdd 	bl	8001f34 <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <DHT11_Read+0xec>)
 8000f7e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f80:	f000 ffd8 	bl	8001f34 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000f88:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f8a:	e004      	b.n	8000f96 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000f8c:	f000 ffd2 	bl	8001f34 <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000f94:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <DHT11_Read+0xf4>)
 8000f9c:	f001 fb22 	bl	80025e4 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <DHT11_Read+0xd4>
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <DHT11_Read+0xec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1c9a      	adds	r2, r3, #2
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <DHT11_Read+0xf0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8eb      	bhi.n	8000f8c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d995      	bls.n	8000eec <DHT11_Read+0xc>
    }
  }
  return b;
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000016c 	.word	0x2000016c
 8000fd0:	20000170 	.word	0x20000170
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <UART_SendData>:

void UART_SendData(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(huart, pData, Size, HAL_MAX_DELAY);
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f003 f8a4 	bl	800413c <HAL_UART_Transmit>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	ed2d 8b02 	vpush	{d8}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 ff2f 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f949 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fa59 	bl	80014c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001012:	f000 f9af 	bl	8001374 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001016:	f000 f9db 	bl	80013d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800101a:	f000 fa29 	bl	8001470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800101e:	488a      	ldr	r0, [pc, #552]	@ (8001248 <main+0x24c>)
 8001020:	f002 fd86 	bl	8003b30 <HAL_TIM_Base_Start>
  SSD1306_Init();
 8001024:	f000 fad4 	bl	80015d0 <SSD1306_Init>
  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1);
 8001028:	2201      	movs	r2, #1
 800102a:	4988      	ldr	r1, [pc, #544]	@ (800124c <main+0x250>)
 800102c:	4888      	ldr	r0, [pc, #544]	@ (8001250 <main+0x254>)
 800102e:	f003 f910 	bl	8004252 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(DHT11_Start())
 8001032:	f7ff fedd 	bl	8000df0 <DHT11_Start>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8100 	beq.w	800123e <main+0x242>
	      {
	        RHI = DHT11_Read(); // Relative humidity integral
 800103e:	f7ff ff4f 	bl	8000ee0 <DHT11_Read>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b83      	ldr	r3, [pc, #524]	@ (8001254 <main+0x258>)
 8001048:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 800104a:	f7ff ff49 	bl	8000ee0 <DHT11_Read>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b81      	ldr	r3, [pc, #516]	@ (8001258 <main+0x25c>)
 8001054:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001056:	f7ff ff43 	bl	8000ee0 <DHT11_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <main+0x260>)
 8001060:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 8001062:	f7ff ff3d 	bl	8000ee0 <DHT11_Read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b7d      	ldr	r3, [pc, #500]	@ (8001260 <main+0x264>)
 800106c:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 800106e:	f7ff ff37 	bl	8000ee0 <DHT11_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b7b      	ldr	r3, [pc, #492]	@ (8001264 <main+0x268>)
 8001078:	701a      	strb	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM)
 800107a:	4b76      	ldr	r3, [pc, #472]	@ (8001254 <main+0x258>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b75      	ldr	r3, [pc, #468]	@ (8001258 <main+0x25c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4413      	add	r3, r2
 8001086:	4a75      	ldr	r2, [pc, #468]	@ (800125c <main+0x260>)
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a74      	ldr	r2, [pc, #464]	@ (8001260 <main+0x264>)
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a74      	ldr	r2, [pc, #464]	@ (8001264 <main+0x268>)
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	4293      	cmp	r3, r2
 8001098:	f040 80d1 	bne.w	800123e <main+0x242>
	        {
	          // Can use RHI and TCI for any purposes if whole number only needed
	          tCelsius = (float)TCI + (float)(TCD/10.0);
 800109c:	4b6f      	ldr	r3, [pc, #444]	@ (800125c <main+0x260>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80010a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001260 <main+0x264>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa41 	bl	8000534 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001268 <main+0x26c>)
 80010b8:	f7ff fbd0 	bl	800085c <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fcb2 	bl	8000a2c <__aeabi_d2f>
 80010c8:	ee07 0a90 	vmov	s15, r0
 80010cc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010d0:	4b66      	ldr	r3, [pc, #408]	@ (800126c <main+0x270>)
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	          tFahrenheit = tCelsius * 9/5 + 32;
 80010d6:	4b65      	ldr	r3, [pc, #404]	@ (800126c <main+0x270>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80010e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001270 <main+0x274>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001274 <main+0x278>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
	          RH = (float)RHI + (float)(RHD/10.0);
 80010fa:	4b56      	ldr	r3, [pc, #344]	@ (8001254 <main+0x258>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001106:	4b54      	ldr	r3, [pc, #336]	@ (8001258 <main+0x25c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa12 	bl	8000534 <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b54      	ldr	r3, [pc, #336]	@ (8001268 <main+0x26c>)
 8001116:	f7ff fba1 	bl	800085c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fc83 	bl	8000a2c <__aeabi_d2f>
 8001126:	ee07 0a90 	vmov	s15, r0
 800112a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800112e:	4b52      	ldr	r3, [pc, #328]	@ (8001278 <main+0x27c>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
	          // Can use tCelsius, tFahrenheit and RH for any purposes
	          TFI = tFahrenheit;  // Fahrenheit integral
 8001134:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <main+0x278>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <main+0x280>)
 8001148:	701a      	strb	r2, [r3, #0]
	          TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 800114a:	4b4a      	ldr	r3, [pc, #296]	@ (8001274 <main+0x278>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <main+0x280>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001176:	edc7 7a01 	vstr	s15, [r7, #4]
 800117a:	793b      	ldrb	r3, [r7, #4]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <main+0x284>)
 8001180:	701a      	strb	r2, [r3, #0]
	          sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8001182:	4b36      	ldr	r3, [pc, #216]	@ (800125c <main+0x260>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <main+0x264>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	493d      	ldr	r1, [pc, #244]	@ (8001284 <main+0x288>)
 800118e:	483e      	ldr	r0, [pc, #248]	@ (8001288 <main+0x28c>)
 8001190:	f003 ffda 	bl	8005148 <siprintf>
	          SSD1306_GotoXY (0, 0);
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f000 fb84 	bl	80018a4 <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	493b      	ldr	r1, [pc, #236]	@ (800128c <main+0x290>)
 80011a0:	4839      	ldr	r0, [pc, #228]	@ (8001288 <main+0x28c>)
 80011a2:	f000 fc13 	bl	80019cc <SSD1306_Puts>
	          sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 80011a6:	4b35      	ldr	r3, [pc, #212]	@ (800127c <main+0x280>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <main+0x284>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4937      	ldr	r1, [pc, #220]	@ (8001290 <main+0x294>)
 80011b2:	4835      	ldr	r0, [pc, #212]	@ (8001288 <main+0x28c>)
 80011b4:	f003 ffc8 	bl	8005148 <siprintf>
	          SSD1306_GotoXY (0, 20);
 80011b8:	2114      	movs	r1, #20
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 fb72 	bl	80018a4 <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4932      	ldr	r1, [pc, #200]	@ (800128c <main+0x290>)
 80011c4:	4830      	ldr	r0, [pc, #192]	@ (8001288 <main+0x28c>)
 80011c6:	f000 fc01 	bl	80019cc <SSD1306_Puts>
	          sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <main+0x258>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <main+0x25c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	492f      	ldr	r1, [pc, #188]	@ (8001294 <main+0x298>)
 80011d6:	482c      	ldr	r0, [pc, #176]	@ (8001288 <main+0x28c>)
 80011d8:	f003 ffb6 	bl	8005148 <siprintf>
	          SSD1306_GotoXY (0, 40);
 80011dc:	2128      	movs	r1, #40	@ 0x28
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fb60 	bl	80018a4 <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	4929      	ldr	r1, [pc, #164]	@ (800128c <main+0x290>)
 80011e8:	4827      	ldr	r0, [pc, #156]	@ (8001288 <main+0x28c>)
 80011ea:	f000 fbef 	bl	80019cc <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 80011ee:	f000 fab3 	bl	8001758 <SSD1306_UpdateScreen>


	          sprintf(strCopy,"Temp: %d.%d C   \n", TCI, TCD);
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <main+0x260>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <main+0x264>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4926      	ldr	r1, [pc, #152]	@ (8001298 <main+0x29c>)
 80011fe:	4822      	ldr	r0, [pc, #136]	@ (8001288 <main+0x28c>)
 8001200:	f003 ffa2 	bl	8005148 <siprintf>
	          UART_SendData(&huart1, (uint8_t *)strCopy, strlen(strCopy));
 8001204:	4820      	ldr	r0, [pc, #128]	@ (8001288 <main+0x28c>)
 8001206:	f7fe ffeb 	bl	80001e0 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	491d      	ldr	r1, [pc, #116]	@ (8001288 <main+0x28c>)
 8001212:	480f      	ldr	r0, [pc, #60]	@ (8001250 <main+0x254>)
 8001214:	f7ff fee0 	bl	8000fd8 <UART_SendData>

	          sprintf(strCopy,"RH: %d.%d %%   \n", RHI, RHD);
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <main+0x258>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <main+0x25c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	491e      	ldr	r1, [pc, #120]	@ (800129c <main+0x2a0>)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <main+0x28c>)
 8001226:	f003 ff8f 	bl	8005148 <siprintf>
	          UART_SendData(&huart1, (uint8_t *)strCopy, strlen(strCopy));
 800122a:	4817      	ldr	r0, [pc, #92]	@ (8001288 <main+0x28c>)
 800122c:	f7fe ffd8 	bl	80001e0 <strlen>
 8001230:	4603      	mov	r3, r0
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4914      	ldr	r1, [pc, #80]	@ (8001288 <main+0x28c>)
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <main+0x254>)
 800123a:	f7ff fecd 	bl	8000fd8 <UART_SendData>
	        }



	      }
	      HAL_Delay(2000);
 800123e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001242:	f000 fe83 	bl	8001f4c <HAL_Delay>
	  if(DHT11_Start())
 8001246:	e6f4      	b.n	8001032 <main+0x36>
 8001248:	200000d4 	.word	0x200000d4
 800124c:	20000164 	.word	0x20000164
 8001250:	2000011c 	.word	0x2000011c
 8001254:	20000165 	.word	0x20000165
 8001258:	20000166 	.word	0x20000166
 800125c:	20000167 	.word	0x20000167
 8001260:	20000168 	.word	0x20000168
 8001264:	20000169 	.word	0x20000169
 8001268:	40240000 	.word	0x40240000
 800126c:	20000174 	.word	0x20000174
 8001270:	42000000 	.word	0x42000000
 8001274:	20000178 	.word	0x20000178
 8001278:	2000017c 	.word	0x2000017c
 800127c:	20000180 	.word	0x20000180
 8001280:	20000181 	.word	0x20000181
 8001284:	08005aa0 	.word	0x08005aa0
 8001288:	20000184 	.word	0x20000184
 800128c:	20000000 	.word	0x20000000
 8001290:	08005aac 	.word	0x08005aac
 8001294:	08005ab8 	.word	0x08005ab8
 8001298:	08005ac4 	.word	0x08005ac4
 800129c:	08005ad8 	.word	0x08005ad8

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	@ 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	@ 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 ff6a 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <SystemClock_Config+0xcc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	4a27      	ldr	r2, [pc, #156]	@ (800136c <SystemClock_Config+0xcc>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <SystemClock_Config+0xd0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012ec:	4a20      	ldr	r2, [pc, #128]	@ (8001370 <SystemClock_Config+0xd0>)
 80012ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <SystemClock_Config+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001314:	2308      	movs	r3, #8
 8001316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001318:	2348      	movs	r3, #72	@ 0x48
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f001 ff59 	bl	80031e0 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001334:	f000 f946 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2102      	movs	r1, #2
 8001354:	4618      	mov	r0, r3
 8001356:	f002 f9bb 	bl	80036d0 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001360:	f000 f930 	bl	80015c4 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	@ 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_I2C1_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_I2C1_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_I2C1_Init+0x50>)
 80013b2:	f001 f949 	bl	8002648 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 f902 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000080 	.word	0x20000080
 80013c8:	40005400 	.word	0x40005400
 80013cc:	00061a80 	.word	0x00061a80

080013d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013ee:	4a1f      	ldr	r2, [pc, #124]	@ (800146c <MX_TIM1_Init+0x9c>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013f4:	2247      	movs	r2, #71	@ 0x47
 80013f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_TIM1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001418:	4813      	ldr	r0, [pc, #76]	@ (8001468 <MX_TIM1_Init+0x98>)
 800141a:	f002 fb39 	bl	8003a90 <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001424:	f000 f8ce 	bl	80015c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001436:	f002 fbd5 	bl	8003be4 <HAL_TIM_ConfigClockSource>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001440:	f000 f8c0 	bl	80015c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001452:	f002 fdb5 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800145c:	f000 f8b2 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000d4 	.word	0x200000d4
 800146c:	40010000 	.word	0x40010000

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f002 fdf8 	bl	800409c <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f887 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000011c 	.word	0x2000011c
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <MX_GPIO_Init+0x9c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <MX_GPIO_Init+0x9c>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_GPIO_Init+0x9c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_GPIO_Init+0x9c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <MX_GPIO_Init+0x9c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_GPIO_Init+0x9c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_GPIO_Init+0x9c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <MX_GPIO_Init+0x9c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_GPIO_Init+0x9c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <MX_GPIO_Init+0xa0>)
 8001536:	f001 f86d 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800153e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_GPIO_Init+0xa0>)
 8001554:	f000 fec2 	bl	80022dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40020400 	.word	0x40020400

08001568 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_UART_RxCpltCallback+0x4c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d117      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x42>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_UART_RxCpltCallback+0x50>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001580:	d105      	bne.n	800158e <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2102      	movs	r1, #2
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <HAL_UART_RxCpltCallback+0x54>)
 8001588:	f001 f844 	bl	8002614 <HAL_GPIO_WritePin>
 800158c:	e008      	b.n	80015a0 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_UART_RxCpltCallback+0x50>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b59      	cmp	r3, #89	@ 0x59
 8001594:	d104      	bne.n	80015a0 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <HAL_UART_RxCpltCallback+0x54>)
 800159c:	f001 f83a 	bl	8002614 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 80015a0:	2201      	movs	r2, #1
 80015a2:	4905      	ldr	r1, [pc, #20]	@ (80015b8 <HAL_UART_RxCpltCallback+0x50>)
 80015a4:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <HAL_UART_RxCpltCallback+0x58>)
 80015a6:	f002 fe54 	bl	8004252 <HAL_UART_Receive_IT>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40011000 	.word	0x40011000
 80015b8:	20000164 	.word	0x20000164
 80015bc:	40020000 	.word	0x40020000
 80015c0:	2000011c 	.word	0x2000011c

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <Error_Handler+0x8>

080015d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015d6:	f000 fa1f 	bl	8001a18 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015da:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015de:	2201      	movs	r2, #1
 80015e0:	2178      	movs	r1, #120	@ 0x78
 80015e2:	485b      	ldr	r0, [pc, #364]	@ (8001750 <SSD1306_Init+0x180>)
 80015e4:	f001 fa72 	bl	8002acc <HAL_I2C_IsDeviceReady>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e0a9      	b.n	8001746 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015f2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80015f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015f8:	e002      	b.n	8001600 <SSD1306_Init+0x30>
		p--;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001606:	22ae      	movs	r2, #174	@ 0xae
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 fa80 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001610:	2220      	movs	r2, #32
 8001612:	2100      	movs	r1, #0
 8001614:	2078      	movs	r0, #120	@ 0x78
 8001616:	f000 fa7b 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800161a:	2210      	movs	r2, #16
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	@ 0x78
 8001620:	f000 fa76 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001624:	22b0      	movs	r2, #176	@ 0xb0
 8001626:	2100      	movs	r1, #0
 8001628:	2078      	movs	r0, #120	@ 0x78
 800162a:	f000 fa71 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 fa6c 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2078      	movs	r0, #120	@ 0x78
 800163e:	f000 fa67 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001642:	2210      	movs	r2, #16
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	@ 0x78
 8001648:	f000 fa62 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	2078      	movs	r0, #120	@ 0x78
 8001652:	f000 fa5d 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001656:	2281      	movs	r2, #129	@ 0x81
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	@ 0x78
 800165c:	f000 fa58 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001660:	22ff      	movs	r2, #255	@ 0xff
 8001662:	2100      	movs	r1, #0
 8001664:	2078      	movs	r0, #120	@ 0x78
 8001666:	f000 fa53 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800166a:	22a1      	movs	r2, #161	@ 0xa1
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	@ 0x78
 8001670:	f000 fa4e 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001674:	22a6      	movs	r2, #166	@ 0xa6
 8001676:	2100      	movs	r1, #0
 8001678:	2078      	movs	r0, #120	@ 0x78
 800167a:	f000 fa49 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800167e:	22a8      	movs	r2, #168	@ 0xa8
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	@ 0x78
 8001684:	f000 fa44 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001688:	223f      	movs	r2, #63	@ 0x3f
 800168a:	2100      	movs	r1, #0
 800168c:	2078      	movs	r0, #120	@ 0x78
 800168e:	f000 fa3f 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001692:	22a4      	movs	r2, #164	@ 0xa4
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 fa3a 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800169c:	22d3      	movs	r2, #211	@ 0xd3
 800169e:	2100      	movs	r1, #0
 80016a0:	2078      	movs	r0, #120	@ 0x78
 80016a2:	f000 fa35 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 fa30 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016b0:	22d5      	movs	r2, #213	@ 0xd5
 80016b2:	2100      	movs	r1, #0
 80016b4:	2078      	movs	r0, #120	@ 0x78
 80016b6:	f000 fa2b 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016ba:	22f0      	movs	r2, #240	@ 0xf0
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	@ 0x78
 80016c0:	f000 fa26 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016c4:	22d9      	movs	r2, #217	@ 0xd9
 80016c6:	2100      	movs	r1, #0
 80016c8:	2078      	movs	r0, #120	@ 0x78
 80016ca:	f000 fa21 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016ce:	2222      	movs	r2, #34	@ 0x22
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 fa1c 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016d8:	22da      	movs	r2, #218	@ 0xda
 80016da:	2100      	movs	r1, #0
 80016dc:	2078      	movs	r0, #120	@ 0x78
 80016de:	f000 fa17 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016e2:	2212      	movs	r2, #18
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 fa12 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016ec:	22db      	movs	r2, #219	@ 0xdb
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	@ 0x78
 80016f2:	f000 fa0d 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016f6:	2220      	movs	r2, #32
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 fa08 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001700:	228d      	movs	r2, #141	@ 0x8d
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	@ 0x78
 8001706:	f000 fa03 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800170a:	2214      	movs	r2, #20
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 f9fe 	bl	8001b10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001714:	22af      	movs	r2, #175	@ 0xaf
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	@ 0x78
 800171a:	f000 f9f9 	bl	8001b10 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800171e:	222e      	movs	r2, #46	@ 0x2e
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f9f4 	bl	8001b10 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001728:	2000      	movs	r0, #0
 800172a:	f000 f843 	bl	80017b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800172e:	f000 f813 	bl	8001758 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <SSD1306_Init+0x184>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <SSD1306_Init+0x184>)
 800173a:	2200      	movs	r2, #0
 800173c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SSD1306_Init+0x184>)
 8001740:	2201      	movs	r2, #1
 8001742:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000080 	.word	0x20000080
 8001754:	20000594 	.word	0x20000594

08001758 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e01d      	b.n	80017a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3b50      	subs	r3, #80	@ 0x50
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	@ 0x78
 8001770:	f000 f9ce 	bl	8001b10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	@ 0x78
 800177a:	f000 f9c9 	bl	8001b10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800177e:	2210      	movs	r2, #16
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	@ 0x78
 8001784:	f000 f9c4 	bl	8001b10 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	01db      	lsls	r3, r3, #7
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <SSD1306_UpdateScreen+0x58>)
 800178e:	441a      	add	r2, r3
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	2140      	movs	r1, #64	@ 0x40
 8001794:	2078      	movs	r0, #120	@ 0x78
 8001796:	f000 f955 	bl	8001a44 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3301      	adds	r3, #1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d9de      	bls.n	8001764 <SSD1306_UpdateScreen+0xc>
	}
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000194 	.word	0x20000194

080017b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <SSD1306_Fill+0x14>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <SSD1306_Fill+0x16>
 80017c8:	23ff      	movs	r3, #255	@ 0xff
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	4619      	mov	r1, r3
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <SSD1306_Fill+0x2c>)
 80017d2:	f003 fcd9 	bl	8005188 <memset>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000194 	.word	0x20000194

080017e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	460b      	mov	r3, r1
 80017f0:	80bb      	strh	r3, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	70fb      	strb	r3, [r7, #3]
	if (
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017fa:	d848      	bhi.n	800188e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001800:	d845      	bhi.n	800188e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <SSD1306_DrawPixel+0xb8>)
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d11a      	bne.n	8001854 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	b298      	uxth	r0, r3
 8001826:	4603      	mov	r3, r0
 8001828:	01db      	lsls	r3, r3, #7
 800182a:	4413      	add	r3, r2
 800182c:	4a1c      	ldr	r2, [pc, #112]	@ (80018a0 <SSD1306_DrawPixel+0xbc>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	b25a      	sxtb	r2, r3
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	b25b      	sxtb	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b259      	sxtb	r1, r3
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	4603      	mov	r3, r0
 8001848:	01db      	lsls	r3, r3, #7
 800184a:	4413      	add	r3, r2
 800184c:	b2c9      	uxtb	r1, r1
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <SSD1306_DrawPixel+0xbc>)
 8001850:	54d1      	strb	r1, [r2, r3]
 8001852:	e01d      	b.n	8001890 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	b298      	uxth	r0, r3
 800185c:	4603      	mov	r3, r0
 800185e:	01db      	lsls	r3, r3, #7
 8001860:	4413      	add	r3, r2
 8001862:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <SSD1306_DrawPixel+0xbc>)
 8001864:	5cd3      	ldrb	r3, [r2, r3]
 8001866:	b25a      	sxtb	r2, r3
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	b25b      	sxtb	r3, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	b25b      	sxtb	r3, r3
 800187a:	4013      	ands	r3, r2
 800187c:	b259      	sxtb	r1, r3
 800187e:	88fa      	ldrh	r2, [r7, #6]
 8001880:	4603      	mov	r3, r0
 8001882:	01db      	lsls	r3, r3, #7
 8001884:	4413      	add	r3, r2
 8001886:	b2c9      	uxtb	r1, r1
 8001888:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <SSD1306_DrawPixel+0xbc>)
 800188a:	54d1      	strb	r1, [r2, r3]
 800188c:	e000      	b.n	8001890 <SSD1306_DrawPixel+0xac>
		return;
 800188e:	bf00      	nop
	}
}
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000594 	.word	0x20000594
 80018a0:	20000194 	.word	0x20000194

080018a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	80fb      	strh	r3, [r7, #6]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018b4:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SSD1306_GotoXY+0x28>)
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <SSD1306_GotoXY+0x28>)
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	8053      	strh	r3, [r2, #2]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000594 	.word	0x20000594

080018d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <SSD1306_Putc+0xf8>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
	if (
 80018ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ee:	dc07      	bgt.n	8001900 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018f0:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <SSD1306_Putc+0xf8>)
 80018f2:	885b      	ldrh	r3, [r3, #2]
 80018f4:	461a      	mov	r2, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018fe:	dd01      	ble.n	8001904 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001900:	2300      	movs	r3, #0
 8001902:	e05d      	b.n	80019c0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e04b      	b.n	80019a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	3b20      	subs	r3, #32
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	7849      	ldrb	r1, [r1, #1]
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4619      	mov	r1, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	440b      	add	r3, r1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	e030      	b.n	8001990 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <SSD1306_Putc+0xf8>)
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	b298      	uxth	r0, r3
 800194a:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <SSD1306_Putc+0xf8>)
 800194c:	885a      	ldrh	r2, [r3, #2]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	79ba      	ldrb	r2, [r7, #6]
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff ff43 	bl	80017e4 <SSD1306_DrawPixel>
 800195e:	e014      	b.n	800198a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001960:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <SSD1306_Putc+0xf8>)
 8001962:	881a      	ldrh	r2, [r3, #0]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4413      	add	r3, r2
 800196a:	b298      	uxth	r0, r3
 800196c:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <SSD1306_Putc+0xf8>)
 800196e:	885a      	ldrh	r2, [r3, #2]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b299      	uxth	r1, r3
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	f7ff ff2d 	bl	80017e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	3301      	adds	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4293      	cmp	r3, r2
 800199a:	d3c8      	bcc.n	800192e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	461a      	mov	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d3ad      	bcc.n	800190a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <SSD1306_Putc+0xf8>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <SSD1306_Putc+0xf8>)
 80019bc:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80019be:	79fb      	ldrb	r3, [r7, #7]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000594 	.word	0x20000594

080019cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019da:	e012      	b.n	8001a02 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff73 	bl	80018d0 <SSD1306_Putc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d002      	beq.n	80019fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	e008      	b.n	8001a0e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e8      	bne.n	80019dc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <ssd1306_I2C_Init+0x28>)
 8001a20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a22:	e002      	b.n	8001a2a <ssd1306_I2C_Init+0x12>
		p--;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	0003d090 	.word	0x0003d090

08001a44 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b0c7      	sub	sp, #284	@ 0x11c
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001a52:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001a56:	600a      	str	r2, [r1, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a5e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a62:	4622      	mov	r2, r4
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a6a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a6e:	4602      	mov	r2, r0
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a8a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a98:	e015      	b.n	8001ac6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a9a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a9e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001aa2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001aae:	3301      	adds	r3, #1
 8001ab0:	7811      	ldrb	r1, [r2, #0]
 8001ab2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ab6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001aba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001abc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ac6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ad0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001ad4:	8812      	ldrh	r2, [r2, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d8df      	bhi.n	8001a9a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ada:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ade:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b299      	uxth	r1, r3
 8001ae6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f107 020c 	add.w	r2, r7, #12
 8001af8:	200a      	movs	r0, #10
 8001afa:	9000      	str	r0, [sp, #0]
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <ssd1306_I2C_WriteMulti+0xc8>)
 8001afe:	f000 fee7 	bl	80028d0 <HAL_I2C_Master_Transmit>
}
 8001b02:	bf00      	nop
 8001b04:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	20000080 	.word	0x20000080

08001b10 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	230a      	movs	r3, #10
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <ssd1306_I2C_Write+0x38>)
 8001b3a:	f000 fec9 	bl	80028d0 <HAL_I2C_Master_Transmit>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000080 	.word	0x20000080

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <HAL_I2C_MspInit+0x84>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d12b      	bne.n	8001c16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a17      	ldr	r2, [pc, #92]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001bda:	23c0      	movs	r3, #192	@ 0xc0
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bde:	2312      	movs	r3, #18
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bea:	2304      	movs	r3, #4
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <HAL_I2C_MspInit+0x8c>)
 8001bf6:	f000 fb71 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_I2C_MspInit+0x88>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <HAL_TIM_Base_MspInit+0x3c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10d      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <HAL_TIM_Base_MspInit+0x40>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_TIM_Base_MspInit+0x40>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <HAL_TIM_Base_MspInit+0x40>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <HAL_UART_MspInit+0x94>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d134      	bne.n	8001cfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_UART_MspInit+0x98>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_Tx_Pin|BT_Rx_Pin;
 8001cca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cdc:	2307      	movs	r3, #7
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	@ (8001d0c <HAL_UART_MspInit+0x9c>)
 8001ce8:	f000 faf8 	bl	80022dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2025      	movs	r0, #37	@ 0x25
 8001cf2:	f000 fa2a 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf6:	2025      	movs	r0, #37	@ 0x25
 8001cf8:	f000 fa43 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	@ 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d66:	f000 f8d1 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <USART1_IRQHandler+0x10>)
 8001d76:	f002 fa91 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000011c 	.word	0x2000011c

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f003 f9f0 	bl	8005198 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20010000 	.word	0x20010000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	2000059c 	.word	0x2000059c
 8001dec:	200006f0 	.word	0x200006f0

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e18:	f7ff ffea 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f003 f9af 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff f8d9 	bl	8000ffc <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e58:	080068a4 	.word	0x080068a4
  ldr r2, =_sbss
 8001e5c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e60:	200006ec 	.word	0x200006ec

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f94f 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe56 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f967 	bl	800219e <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f92f 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000010 	.word	0x20000010
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000010 	.word	0x20000010
 8001f30:	200005a0 	.word	0x200005a0

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200005a0 	.word	0x200005a0

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000010 	.word	0x20000010

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	@ (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff feb6 	bl	8001f34 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e052      	b.n	800228e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0216 	bic.w	r2, r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002206:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d103      	bne.n	8002218 <HAL_DMA_Abort+0x62>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0208 	bic.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002238:	e013      	b.n	8002262 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223a:	f7ff fe7b 	bl	8001f34 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b05      	cmp	r3, #5
 8002246:	d90c      	bls.n	8002262 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e015      	b.n	800228e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e4      	bne.n	800223a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	223f      	movs	r2, #63	@ 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e00c      	b.n	80022ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e159      	b.n	80025ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8148 	bne.w	80025a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d005      	beq.n	800232e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	2b02      	cmp	r3, #2
 800232c:	d130      	bne.n	8002390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b03      	cmp	r3, #3
 800239a:	d017      	beq.n	80023cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d123      	bne.n	8002420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a2 	beq.w	80025a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b57      	ldr	r3, [pc, #348]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a56      	ldr	r2, [pc, #344]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b54      	ldr	r3, [pc, #336]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247e:	4a52      	ldr	r2, [pc, #328]	@ (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a49      	ldr	r2, [pc, #292]	@ (80025cc <HAL_GPIO_Init+0x2f0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x202>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a48      	ldr	r2, [pc, #288]	@ (80025d0 <HAL_GPIO_Init+0x2f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x1fe>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a47      	ldr	r2, [pc, #284]	@ (80025d4 <HAL_GPIO_Init+0x2f8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x1fa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a46      	ldr	r2, [pc, #280]	@ (80025d8 <HAL_GPIO_Init+0x2fc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x1f6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a45      	ldr	r2, [pc, #276]	@ (80025dc <HAL_GPIO_Init+0x300>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x1f2>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_GPIO_Init+0x2ec>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a2f      	ldr	r2, [pc, #188]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a24      	ldr	r2, [pc, #144]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f aea2 	bls.w	80022f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e12b      	b.n	80028b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fa94 	bl	8001b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800269a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026ac:	f001 f9c8 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 80026b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a81      	ldr	r2, [pc, #516]	@ (80028bc <HAL_I2C_Init+0x274>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d807      	bhi.n	80026cc <HAL_I2C_Init+0x84>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a80      	ldr	r2, [pc, #512]	@ (80028c0 <HAL_I2C_Init+0x278>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	bf94      	ite	ls
 80026c4:	2301      	movls	r3, #1
 80026c6:	2300      	movhi	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e006      	b.n	80026da <HAL_I2C_Init+0x92>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a7d      	ldr	r2, [pc, #500]	@ (80028c4 <HAL_I2C_Init+0x27c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bf94      	ite	ls
 80026d4:	2301      	movls	r3, #1
 80026d6:	2300      	movhi	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0e7      	b.n	80028b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a78      	ldr	r2, [pc, #480]	@ (80028c8 <HAL_I2C_Init+0x280>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a6a      	ldr	r2, [pc, #424]	@ (80028bc <HAL_I2C_Init+0x274>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d802      	bhi.n	800271c <HAL_I2C_Init+0xd4>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3301      	adds	r3, #1
 800271a:	e009      	b.n	8002730 <HAL_I2C_Init+0xe8>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	4a69      	ldr	r2, [pc, #420]	@ (80028cc <HAL_I2C_Init+0x284>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	3301      	adds	r3, #1
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002742:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	495c      	ldr	r1, [pc, #368]	@ (80028bc <HAL_I2C_Init+0x274>)
 800274c:	428b      	cmp	r3, r1
 800274e:	d819      	bhi.n	8002784 <HAL_I2C_Init+0x13c>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e59      	subs	r1, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fbb1 f3f3 	udiv	r3, r1, r3
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002764:	400b      	ands	r3, r1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_I2C_Init+0x138>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e59      	subs	r1, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fbb1 f3f3 	udiv	r3, r1, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	e051      	b.n	8002824 <HAL_I2C_Init+0x1dc>
 8002780:	2304      	movs	r3, #4
 8002782:	e04f      	b.n	8002824 <HAL_I2C_Init+0x1dc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d111      	bne.n	80027b0 <HAL_I2C_Init+0x168>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	e012      	b.n	80027d6 <HAL_I2C_Init+0x18e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	0099      	lsls	r1, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Init+0x196>
 80027da:	2301      	movs	r3, #1
 80027dc:	e022      	b.n	8002824 <HAL_I2C_Init+0x1dc>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10e      	bne.n	8002804 <HAL_I2C_Init+0x1bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e58      	subs	r0, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	440b      	add	r3, r1
 80027f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002802:	e00f      	b.n	8002824 <HAL_I2C_Init+0x1dc>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e58      	subs	r0, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	0099      	lsls	r1, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6809      	ldr	r1, [r1, #0]
 8002828:	4313      	orrs	r3, r2
 800282a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002852:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6911      	ldr	r1, [r2, #16]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	000186a0 	.word	0x000186a0
 80028c0:	001e847f 	.word	0x001e847f
 80028c4:	003d08ff 	.word	0x003d08ff
 80028c8:	431bde83 	.word	0x431bde83
 80028cc:	10624dd3 	.word	0x10624dd3

080028d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	817b      	strh	r3, [r7, #10]
 80028e0:	4613      	mov	r3, r2
 80028e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fb26 	bl	8001f34 <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 80e0 	bne.w	8002ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2319      	movs	r3, #25
 80028fe:	2201      	movs	r2, #1
 8002900:	4970      	ldr	r1, [pc, #448]	@ (8002ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fa92 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	e0d3      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x50>
 800291c:	2302      	movs	r3, #2
 800291e:	e0cc      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d007      	beq.n	8002946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2221      	movs	r2, #33	@ 0x21
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2210      	movs	r2, #16
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	893a      	ldrh	r2, [r7, #8]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a50      	ldr	r2, [pc, #320]	@ (8002ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002986:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f9ca 	bl	8002d28 <I2C_MasterRequestWrite>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e08d      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029b4:	e066      	b.n	8002a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb50 	bl	8003060 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d107      	bne.n	80029de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06b      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_I2C_Master_Transmit+0x188>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d017      	beq.n	8002a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	6a39      	ldr	r1, [r7, #32]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb47 	bl	80030f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d107      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e01a      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d194      	bne.n	80029b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	00100002 	.word	0x00100002
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fa2a 	bl	8001f34 <HAL_GetTick>
 8002ae0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 8111 	bne.w	8002d16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4988      	ldr	r1, [pc, #544]	@ (8002d20 <HAL_I2C_IsDeviceReady+0x254>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f994 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e104      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_IsDeviceReady+0x50>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0fd      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2224      	movs	r2, #36	@ 0x24
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a70      	ldr	r2, [pc, #448]	@ (8002d24 <HAL_I2C_IsDeviceReady+0x258>)
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f952 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b9c:	d103      	bne.n	8002ba6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0b6      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bba:	f7ff f9bb 	bl	8001f34 <HAL_GetTick>
 8002bbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bee:	e025      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7ff f9a0 	bl	8001f34 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d302      	bcc.n	8002c06 <HAL_I2C_IsDeviceReady+0x13a>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	22a0      	movs	r2, #160	@ 0xa0
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c46:	d005      	beq.n	8002c54 <HAL_I2C_IsDeviceReady+0x188>
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_I2C_IsDeviceReady+0x188>
 8002c4e:	7dbb      	ldrb	r3, [r7, #22]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0cd      	beq.n	8002bf0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d129      	bne.n	8002cbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	4921      	ldr	r1, [pc, #132]	@ (8002d20 <HAL_I2C_IsDeviceReady+0x254>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8c6 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e036      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e02c      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2319      	movs	r3, #25
 8002cde:	2201      	movs	r2, #1
 8002ce0:	490f      	ldr	r1, [pc, #60]	@ (8002d20 <HAL_I2C_IsDeviceReady+0x254>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8a2 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e012      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f4ff af32 	bcc.w	8002b66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f84f 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f898 	bl	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	@ (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f888 	bl	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3c:	e048      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d044      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff f875 	bl	8001f34 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d139      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10d      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	e00c      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d116      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e023      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10d      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	e00c      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d093      	beq.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	e071      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3e:	d123      	bne.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e067      	b.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d041      	beq.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe ffd0 	bl	8001f34 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d136      	bne.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10c      	bne.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e00b      	b.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e021      	b.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10c      	bne.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e00b      	b.n	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af6d 	bne.w	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f886 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e034      	b.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d028      	beq.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe ff55 	bl	8001f34 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11d      	bne.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d016      	beq.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b80      	cmp	r3, #128	@ 0x80
 80030e4:	d1c3      	bne.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fc:	e034      	b.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f83e 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e034      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d028      	beq.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe ff0d 	bl	8001f34 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d016      	beq.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d1c3      	bne.n	80030fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003196:	d11b      	bne.n	80031d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e267      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b85      	ldr	r3, [pc, #532]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b82      	ldr	r3, [pc, #520]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b7e      	ldr	r3, [pc, #504]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e242      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6c      	ldr	r2, [pc, #432]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a68      	ldr	r2, [pc, #416]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fe4c 	bl	8001f34 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fe48 	bl	8001f34 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e207      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fe38 	bl	8001f34 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fe34 	bl	8001f34 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f3      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b51      	ldr	r3, [pc, #324]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c7      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4937      	ldr	r1, [pc, #220]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fded 	bl	8001f34 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe fde9 	bl	8001f34 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a8      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4925      	ldr	r1, [pc, #148]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fdcc 	bl	8001f34 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe fdc8 	bl	8001f34 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e187      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fdac 	bl	8001f34 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fda8 	bl	8001f34 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e167      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe fd95 	bl	8001f34 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7fe fd91 	bl	8001f34 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d907      	bls.n	800342c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e150      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
 8003428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8097 	beq.w	8003574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b7d      	ldr	r3, [pc, #500]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4a7c      	ldr	r2, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	@ 0x40
 8003466:	4b7a      	ldr	r3, [pc, #488]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b77      	ldr	r3, [pc, #476]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b74      	ldr	r3, [pc, #464]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a73      	ldr	r2, [pc, #460]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fd51 	bl	8001f34 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fd4d 	bl	8001f34 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e10c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x2ea>
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a63      	ldr	r2, [pc, #396]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x30c>
 80034d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ec:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f8:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	4a54      	ldr	r2, [pc, #336]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe fd12 	bl	8001f34 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe fd0e 	bl	8001f34 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0cb      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCC_OscConfig+0x334>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe fcfc 	bl	8001f34 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe fcf8 	bl	8001f34 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0b5      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	4a38      	ldr	r2, [pc, #224]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a1 	beq.w	80036c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d05c      	beq.n	8003644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d141      	bne.n	8003616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b31      	ldr	r3, [pc, #196]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fccc 	bl	8001f34 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fcc8 	bl	8001f34 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e087      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fca1 	bl	8001f34 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fc9d 	bl	8001f34 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e05c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x416>
 8003614:	e054      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fc8a 	bl	8001f34 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fc86 	bl	8001f34 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e045      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e038      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d028      	beq.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d121      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d11a      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fbb8 	bl	8001f34 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fbb4 	bl	8001f34 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fb18 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	08006848 	.word	0x08006848
 8003894:	20000008 	.word	0x20000008
 8003898:	2000000c 	.word	0x2000000c

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b090      	sub	sp, #64	@ 0x40
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ac:	2300      	movs	r3, #0
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e09b      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80038d4:	e09b      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038da:	e098      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d028      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003904:	2100      	movs	r1, #0
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003908:	fb03 f201 	mul.w	r2, r3, r1
 800390c:	2300      	movs	r3, #0
 800390e:	fb00 f303 	mul.w	r3, r0, r3
 8003912:	4413      	add	r3, r2
 8003914:	4a43      	ldr	r2, [pc, #268]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003916:	fba0 1202 	umull	r1, r2, r0, r2
 800391a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800391c:	460a      	mov	r2, r1
 800391e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003922:	4413      	add	r3, r2
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	2200      	movs	r2, #0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	61fa      	str	r2, [r7, #28]
 800392e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003936:	f7fd f8c9 	bl	8000acc <__aeabi_uldivmod>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4613      	mov	r3, r2
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003942:	e053      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003944:	4b35      	ldr	r3, [pc, #212]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	2200      	movs	r2, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	617a      	str	r2, [r7, #20]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003956:	f04f 0b00 	mov.w	fp, #0
 800395a:	4652      	mov	r2, sl
 800395c:	465b      	mov	r3, fp
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	ebb2 080a 	subs.w	r8, r2, sl
 8003976:	eb63 090b 	sbc.w	r9, r3, fp
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800398a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800398e:	ebb2 0408 	subs.w	r4, r2, r8
 8003992:	eb63 0509 	sbc.w	r5, r3, r9
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	00eb      	lsls	r3, r5, #3
 80039a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a4:	00e2      	lsls	r2, r4, #3
 80039a6:	4614      	mov	r4, r2
 80039a8:	461d      	mov	r5, r3
 80039aa:	eb14 030a 	adds.w	r3, r4, sl
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	eb45 030b 	adc.w	r3, r5, fp
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c2:	4629      	mov	r1, r5
 80039c4:	028b      	lsls	r3, r1, #10
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039cc:	4621      	mov	r1, r4
 80039ce:	028a      	lsls	r2, r1, #10
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	2200      	movs	r2, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	60fa      	str	r2, [r7, #12]
 80039dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e0:	f7fd f874 	bl	8000acc <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	3301      	adds	r3, #1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80039fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3740      	adds	r7, #64	@ 0x40
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	017d7840 	.word	0x017d7840

08003a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000008 	.word	0x20000008

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a44:	f7ff fff0 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08006858 	.word	0x08006858

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a6c:	f7ff ffdc 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0b5b      	lsrs	r3, r3, #13
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08006858 	.word	0x08006858

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e041      	b.n	8003b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe f8b8 	bl	8001c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 f950 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d001      	beq.n	8003b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e03c      	b.n	8003bc2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_TIM_Base_Start+0xa0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_TIM_Base_Start+0x5c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b62:	d013      	beq.n	8003b8c <HAL_TIM_Base_Start+0x5c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd4 <HAL_TIM_Base_Start+0xa4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_TIM_Base_Start+0x5c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_TIM_Base_Start+0xa8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_TIM_Base_Start+0x5c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <HAL_TIM_Base_Start+0xac>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIM_Base_Start+0x5c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <HAL_TIM_Base_Start+0xb0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d010      	beq.n	8003bc0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	e007      	b.n	8003bc0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000

08003be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_ConfigClockSource+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0b4      	b.n	8003d6a <HAL_TIM_ConfigClockSource+0x186>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_TIM_ConfigClockSource+0x172>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b70      	cmp	r3, #112	@ 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xa6>
 8003c54:	2b70      	cmp	r3, #112	@ 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b60      	cmp	r3, #96	@ 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x11a>
 8003c5c:	2b60      	cmp	r3, #96	@ 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b50      	cmp	r3, #80	@ 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xfa>
 8003c64:	2b50      	cmp	r3, #80	@ 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x13a>
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b30      	cmp	r3, #48	@ 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b30      	cmp	r3, #48	@ 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	f000 f971 	bl	8003f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	f000 f95a 	bl	8003f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8ce 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	@ 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f927 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f8ed 	bl	8003eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	@ 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f917 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 f8ae 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	@ 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f907 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 f8fe 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	@ (8003e70 <TIM_Base_SetConfig+0xfc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00f      	beq.n	8003dac <TIM_Base_SetConfig+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0x38>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a37      	ldr	r2, [pc, #220]	@ (8003e74 <TIM_Base_SetConfig+0x100>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a36      	ldr	r2, [pc, #216]	@ (8003e78 <TIM_Base_SetConfig+0x104>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x38>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a35      	ldr	r2, [pc, #212]	@ (8003e7c <TIM_Base_SetConfig+0x108>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <TIM_Base_SetConfig+0xfc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a28      	ldr	r2, [pc, #160]	@ (8003e74 <TIM_Base_SetConfig+0x100>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <TIM_Base_SetConfig+0x104>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <TIM_Base_SetConfig+0x108>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <TIM_Base_SetConfig+0x10c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <TIM_Base_SetConfig+0x110>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a23      	ldr	r2, [pc, #140]	@ (8003e88 <TIM_Base_SetConfig+0x114>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	@ (8003e70 <TIM_Base_SetConfig+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]
  }
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f023 030a 	bic.w	r3, r3, #10
 8003ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b087      	sub	sp, #28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f023 0210 	bic.w	r2, r3, #16
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f043 0307 	orr.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e050      	b.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004024:	d013      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a13      	ldr	r2, [pc, #76]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40014000 	.word	0x40014000

0800409c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e042      	b.n	8004134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fdd4 	bl	8001c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	@ 0x24
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fdbd 	bl	8004c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d175      	bne.n	8004248 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_UART_Transmit+0x2c>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e06e      	b.n	800424a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2221      	movs	r2, #33	@ 0x21
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417a:	f7fd fedb 	bl	8001f34 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004194:	d108      	bne.n	80041a8 <HAL_UART_Transmit+0x6c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e003      	b.n	80041b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041b0:	e02e      	b.n	8004210 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	@ 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fb1f 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e03a      	b.n	800424a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3302      	adds	r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e007      	b.n	8004202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1cb      	bne.n	80041b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2140      	movs	r1, #64	@ 0x40
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 faeb 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e006      	b.n	800424a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b20      	cmp	r3, #32
 800426a:	d112      	bne.n	8004292 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_UART_Receive_IT+0x26>
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e00b      	b.n	8004294 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	461a      	mov	r2, r3
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fb12 	bl	80048b2 <UART_Start_Receive_IT>
 800428e:	4603      	mov	r3, r0
 8004290:	e000      	b.n	8004294 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ba      	sub	sp, #232	@ 0xe8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fbf2 	bl	8004ae4 <UART_Receive_IT>
      return;
 8004300:	e25b      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80de 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800431c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80d1 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
 800437a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 81f2 	beq.w	80047b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb7d 	bl	8004ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_UART_IRQHandler+0x17a>
 800440e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04f      	beq.n	80044b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa85 	bl	8004926 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d141      	bne.n	80044ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800445a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1d9      	bne.n	800442a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4a7e      	ldr	r2, [pc, #504]	@ (800467c <HAL_UART_IRQHandler+0x3e0>)
 8004484:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd ff03 	bl	8002296 <HAL_DMA_Abort_IT>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00e      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f994 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00a      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f990 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e006      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f98c 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044c2:	e175      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	bf00      	nop
    return;
 80044c6:	e173      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 814f 	bne.w	8004770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8148 	beq.w	8004770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8141 	beq.w	8004770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b40      	cmp	r3, #64	@ 0x40
 8004510:	f040 80b6 	bne.w	8004680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8145 	beq.w	80047b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004532:	429a      	cmp	r2, r3
 8004534:	f080 813e 	bcs.w	80047b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800453e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454a:	f000 8088 	beq.w	800465e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800456c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800457a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800457e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e1      	bne.n	800459a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3314      	adds	r3, #20
 80045dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e3      	bne.n	80045d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800462c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004640:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004642:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800464e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e3      	bne.n	800461c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004658:	4618      	mov	r0, r3
 800465a:	f7fd fdac 	bl	80021b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800466c:	b29b      	uxth	r3, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b29b      	uxth	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8b7 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800467a:	e09b      	b.n	80047b4 <HAL_UART_IRQHandler+0x518>
 800467c:	080049ed 	.word	0x080049ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 808e 	beq.w	80047b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800469c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8089 	beq.w	80047b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	623b      	str	r3, [r7, #32]
   return(result);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004702:	633a      	str	r2, [r7, #48]	@ 0x30
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f83d 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800476e:	e023      	b.n	80047b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_UART_IRQHandler+0x4f4>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f943 	bl	8004a14 <UART_Transmit_IT>
    return;
 800478e:	e014      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <HAL_UART_IRQHandler+0x51e>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f983 	bl	8004ab4 <UART_EndTransmit_IT>
    return;
 80047ae:	e004      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
    return;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
      return;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_UART_IRQHandler+0x51e>
      return;
 80047b8:	bf00      	nop
  }
}
 80047ba:	37e8      	adds	r7, #232	@ 0xe8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004810:	e03b      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d037      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fd fb8b 	bl	8001f34 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e03a      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d023      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b80      	cmp	r3, #128	@ 0x80
 8004846:	d020      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d01d      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b08      	cmp	r3, #8
 800485a:	d116      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f857 	bl	8004926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2208      	movs	r2, #8
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e00f      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d0b4      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2222      	movs	r2, #34	@ 0x22
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0220 	orr.w	r2, r2, #32
 8004916:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004926:	b480      	push	{r7}
 8004928:	b095      	sub	sp, #84	@ 0x54
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800494e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	61fb      	str	r3, [r7, #28]
   return(result);
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e5      	bne.n	8004962 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	2b01      	cmp	r3, #1
 800499c:	d119      	bne.n	80049d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 0310 	bic.w	r3, r3, #16
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049be:	61ba      	str	r2, [r7, #24]
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	613b      	str	r3, [r7, #16]
   return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e5      	bne.n	800499e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049e0:	bf00      	nop
 80049e2:	3754      	adds	r7, #84	@ 0x54
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fee4 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b21      	cmp	r3, #33	@ 0x21
 8004a26:	d13e      	bne.n	8004aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a30:	d114      	bne.n	8004a5c <UART_Transmit_IT+0x48>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]
 8004a5a:	e008      	b.n	8004a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6211      	str	r1, [r2, #32]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff fe73 	bl	80047c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b22      	cmp	r3, #34	@ 0x22
 8004af6:	f040 80ae 	bne.w	8004c56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b02:	d117      	bne.n	8004b34 <UART_Receive_IT+0x50>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d113      	bne.n	8004b34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b32:	e026      	b.n	8004b82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	d007      	beq.n	8004b58 <UART_Receive_IT+0x74>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <UART_Receive_IT+0x82>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e008      	b.n	8004b78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d15d      	bne.n	8004c52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0220 	bic.w	r2, r2, #32
 8004ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d135      	bne.n	8004c48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f023 0310 	bic.w	r3, r3, #16
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c02:	623a      	str	r2, [r7, #32]
 8004c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	69f9      	ldr	r1, [r7, #28]
 8004c08:	6a3a      	ldr	r2, [r7, #32]
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e5      	bne.n	8004be2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d10a      	bne.n	8004c3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fdd1 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
 8004c46:	e002      	b.n	8004c4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fc8d 	bl	8001568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e002      	b.n	8004c58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3730      	adds	r7, #48	@ 0x30
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c64:	b0c0      	sub	sp, #256	@ 0x100
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	68d9      	ldr	r1, [r3, #12]
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	ea40 0301 	orr.w	r3, r0, r1
 8004c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cb8:	f021 010c 	bic.w	r1, r1, #12
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cda:	6999      	ldr	r1, [r3, #24]
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	ea40 0301 	orr.w	r3, r0, r1
 8004ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b8f      	ldr	r3, [pc, #572]	@ (8004f2c <UART_SetConfig+0x2cc>)
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d005      	beq.n	8004d00 <UART_SetConfig+0xa0>
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8004f30 <UART_SetConfig+0x2d0>)
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d104      	bne.n	8004d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe feb2 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8004d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d08:	e003      	b.n	8004d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d0a:	f7fe fe99 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8004d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1c:	f040 810c 	bne.w	8004f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	1891      	adds	r1, r2, r2
 8004d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d3a:	415b      	adcs	r3, r3
 8004d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d42:	4621      	mov	r1, r4
 8004d44:	eb12 0801 	adds.w	r8, r2, r1
 8004d48:	4629      	mov	r1, r5
 8004d4a:	eb43 0901 	adc.w	r9, r3, r1
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d62:	4690      	mov	r8, r2
 8004d64:	4699      	mov	r9, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	eb18 0303 	adds.w	r3, r8, r3
 8004d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d70:	462b      	mov	r3, r5
 8004d72:	eb49 0303 	adc.w	r3, r9, r3
 8004d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d8e:	460b      	mov	r3, r1
 8004d90:	18db      	adds	r3, r3, r3
 8004d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d94:	4613      	mov	r3, r2
 8004d96:	eb42 0303 	adc.w	r3, r2, r3
 8004d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004da4:	f7fb fe92 	bl	8000acc <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4b61      	ldr	r3, [pc, #388]	@ (8004f34 <UART_SetConfig+0x2d4>)
 8004dae:	fba3 2302 	umull	r2, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	011c      	lsls	r4, r3, #4
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dd8:	4641      	mov	r1, r8
 8004dda:	eb12 0a01 	adds.w	sl, r2, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	eb43 0b01 	adc.w	fp, r3, r1
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df8:	4692      	mov	sl, r2
 8004dfa:	469b      	mov	fp, r3
 8004dfc:	4643      	mov	r3, r8
 8004dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e06:	464b      	mov	r3, r9
 8004e08:	eb4b 0303 	adc.w	r3, fp, r3
 8004e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e24:	460b      	mov	r3, r1
 8004e26:	18db      	adds	r3, r3, r3
 8004e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	eb42 0303 	adc.w	r3, r2, r3
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e3a:	f7fb fe47 	bl	8000acc <__aeabi_uldivmod>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4611      	mov	r1, r2
 8004e44:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <UART_SetConfig+0x2d4>)
 8004e46:	fba3 2301 	umull	r2, r3, r3, r1
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	2264      	movs	r2, #100	@ 0x64
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	1acb      	subs	r3, r1, r3
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e5a:	4b36      	ldr	r3, [pc, #216]	@ (8004f34 <UART_SetConfig+0x2d4>)
 8004e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e68:	441c      	add	r4, r3
 8004e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	1891      	adds	r1, r2, r2
 8004e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e84:	415b      	adcs	r3, r3
 8004e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e8c:	4641      	mov	r1, r8
 8004e8e:	1851      	adds	r1, r2, r1
 8004e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e92:	4649      	mov	r1, r9
 8004e94:	414b      	adcs	r3, r1
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ea4:	4659      	mov	r1, fp
 8004ea6:	00cb      	lsls	r3, r1, #3
 8004ea8:	4651      	mov	r1, sl
 8004eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eae:	4651      	mov	r1, sl
 8004eb0:	00ca      	lsls	r2, r1, #3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4642      	mov	r2, r8
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	eb42 0303 	adc.w	r3, r2, r3
 8004ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	18db      	adds	r3, r3, r3
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ef6:	f7fb fde9 	bl	8000acc <__aeabi_uldivmod>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <UART_SetConfig+0x2d4>)
 8004f00:	fba3 1302 	umull	r1, r3, r3, r2
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	2164      	movs	r1, #100	@ 0x64
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	3332      	adds	r3, #50	@ 0x32
 8004f12:	4a08      	ldr	r2, [pc, #32]	@ (8004f34 <UART_SetConfig+0x2d4>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	f003 0207 	and.w	r2, r3, #7
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4422      	add	r2, r4
 8004f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f28:	e106      	b.n	8005138 <UART_SetConfig+0x4d8>
 8004f2a:	bf00      	nop
 8004f2c:	40011000 	.word	0x40011000
 8004f30:	40011400 	.word	0x40011400
 8004f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	6239      	str	r1, [r7, #32]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	1854      	adds	r4, r2, r1
 8004f5e:	4649      	mov	r1, r9
 8004f60:	eb43 0501 	adc.w	r5, r3, r1
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	00eb      	lsls	r3, r5, #3
 8004f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f72:	00e2      	lsls	r2, r4, #3
 8004f74:	4614      	mov	r4, r2
 8004f76:	461d      	mov	r5, r3
 8004f78:	4643      	mov	r3, r8
 8004f7a:	18e3      	adds	r3, r4, r3
 8004f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f80:	464b      	mov	r3, r9
 8004f82:	eb45 0303 	adc.w	r3, r5, r3
 8004f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	008b      	lsls	r3, r1, #2
 8004faa:	4621      	mov	r1, r4
 8004fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	008a      	lsls	r2, r1, #2
 8004fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fb8:	f7fb fd88 	bl	8000acc <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4b60      	ldr	r3, [pc, #384]	@ (8005144 <UART_SetConfig+0x4e4>)
 8004fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	011c      	lsls	r4, r3, #4
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	61b9      	str	r1, [r7, #24]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6139      	str	r1, [r7, #16]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005020:	464b      	mov	r3, r9
 8005022:	460a      	mov	r2, r1
 8005024:	eb42 0303 	adc.w	r3, r2, r3
 8005028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005044:	4649      	mov	r1, r9
 8005046:	008b      	lsls	r3, r1, #2
 8005048:	4641      	mov	r1, r8
 800504a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504e:	4641      	mov	r1, r8
 8005050:	008a      	lsls	r2, r1, #2
 8005052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005056:	f7fb fd39 	bl	8000acc <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4611      	mov	r1, r2
 8005060:	4b38      	ldr	r3, [pc, #224]	@ (8005144 <UART_SetConfig+0x4e4>)
 8005062:	fba3 2301 	umull	r2, r3, r3, r1
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2264      	movs	r2, #100	@ 0x64
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	1acb      	subs	r3, r1, r3
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	3332      	adds	r3, #50	@ 0x32
 8005074:	4a33      	ldr	r2, [pc, #204]	@ (8005144 <UART_SetConfig+0x4e4>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005080:	441c      	add	r4, r3
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	673b      	str	r3, [r7, #112]	@ 0x70
 800508a:	677a      	str	r2, [r7, #116]	@ 0x74
 800508c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	415b      	adcs	r3, r3
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050a0:	4641      	mov	r1, r8
 80050a2:	1851      	adds	r1, r2, r1
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	4649      	mov	r1, r9
 80050a8:	414b      	adcs	r3, r1
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050b8:	4659      	mov	r1, fp
 80050ba:	00cb      	lsls	r3, r1, #3
 80050bc:	4651      	mov	r1, sl
 80050be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c2:	4651      	mov	r1, sl
 80050c4:	00ca      	lsls	r2, r1, #3
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	4642      	mov	r2, r8
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d2:	464b      	mov	r3, r9
 80050d4:	460a      	mov	r2, r1
 80050d6:	eb42 0303 	adc.w	r3, r2, r3
 80050da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050f4:	4649      	mov	r1, r9
 80050f6:	008b      	lsls	r3, r1, #2
 80050f8:	4641      	mov	r1, r8
 80050fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fe:	4641      	mov	r1, r8
 8005100:	008a      	lsls	r2, r1, #2
 8005102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005106:	f7fb fce1 	bl	8000acc <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <UART_SetConfig+0x4e4>)
 8005110:	fba3 1302 	umull	r1, r3, r3, r2
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	2164      	movs	r1, #100	@ 0x64
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	3332      	adds	r3, #50	@ 0x32
 8005122:	4a08      	ldr	r2, [pc, #32]	@ (8005144 <UART_SetConfig+0x4e4>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	f003 020f 	and.w	r2, r3, #15
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4422      	add	r2, r4
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800513e:	46bd      	mov	sp, r7
 8005140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005144:	51eb851f 	.word	0x51eb851f

08005148 <siprintf>:
 8005148:	b40e      	push	{r1, r2, r3}
 800514a:	b500      	push	{lr}
 800514c:	b09c      	sub	sp, #112	@ 0x70
 800514e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005150:	9002      	str	r0, [sp, #8]
 8005152:	9006      	str	r0, [sp, #24]
 8005154:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005158:	4809      	ldr	r0, [pc, #36]	@ (8005180 <siprintf+0x38>)
 800515a:	9107      	str	r1, [sp, #28]
 800515c:	9104      	str	r1, [sp, #16]
 800515e:	4909      	ldr	r1, [pc, #36]	@ (8005184 <siprintf+0x3c>)
 8005160:	f853 2b04 	ldr.w	r2, [r3], #4
 8005164:	9105      	str	r1, [sp, #20]
 8005166:	6800      	ldr	r0, [r0, #0]
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	a902      	add	r1, sp, #8
 800516c:	f000 f994 	bl	8005498 <_svfiprintf_r>
 8005170:	9b02      	ldr	r3, [sp, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	b01c      	add	sp, #112	@ 0x70
 8005178:	f85d eb04 	ldr.w	lr, [sp], #4
 800517c:	b003      	add	sp, #12
 800517e:	4770      	bx	lr
 8005180:	20000014 	.word	0x20000014
 8005184:	ffff0208 	.word	0xffff0208

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__errno>:
 8005198:	4b01      	ldr	r3, [pc, #4]	@ (80051a0 <__errno+0x8>)
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000014 	.word	0x20000014

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4d0d      	ldr	r5, [pc, #52]	@ (80051dc <__libc_init_array+0x38>)
 80051a8:	4c0d      	ldr	r4, [pc, #52]	@ (80051e0 <__libc_init_array+0x3c>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	2600      	movs	r6, #0
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	4d0b      	ldr	r5, [pc, #44]	@ (80051e4 <__libc_init_array+0x40>)
 80051b6:	4c0c      	ldr	r4, [pc, #48]	@ (80051e8 <__libc_init_array+0x44>)
 80051b8:	f000 fc66 	bl	8005a88 <_init>
 80051bc:	1b64      	subs	r4, r4, r5
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	2600      	movs	r6, #0
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	0800689c 	.word	0x0800689c
 80051e0:	0800689c 	.word	0x0800689c
 80051e4:	0800689c 	.word	0x0800689c
 80051e8:	080068a0 	.word	0x080068a0

080051ec <__retarget_lock_acquire_recursive>:
 80051ec:	4770      	bx	lr

080051ee <__retarget_lock_release_recursive>:
 80051ee:	4770      	bx	lr

080051f0 <_free_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4605      	mov	r5, r0
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d041      	beq.n	800527c <_free_r+0x8c>
 80051f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fc:	1f0c      	subs	r4, r1, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bfb8      	it	lt
 8005202:	18e4      	addlt	r4, r4, r3
 8005204:	f000 f8e0 	bl	80053c8 <__malloc_lock>
 8005208:	4a1d      	ldr	r2, [pc, #116]	@ (8005280 <_free_r+0x90>)
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	b933      	cbnz	r3, 800521c <_free_r+0x2c>
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	6014      	str	r4, [r2, #0]
 8005212:	4628      	mov	r0, r5
 8005214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005218:	f000 b8dc 	b.w	80053d4 <__malloc_unlock>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d908      	bls.n	8005232 <_free_r+0x42>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	1821      	adds	r1, r4, r0
 8005224:	428b      	cmp	r3, r1
 8005226:	bf01      	itttt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	1809      	addeq	r1, r1, r0
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	e7ed      	b.n	800520e <_free_r+0x1e>
 8005232:	461a      	mov	r2, r3
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b10b      	cbz	r3, 800523c <_free_r+0x4c>
 8005238:	42a3      	cmp	r3, r4
 800523a:	d9fa      	bls.n	8005232 <_free_r+0x42>
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	1850      	adds	r0, r2, r1
 8005240:	42a0      	cmp	r0, r4
 8005242:	d10b      	bne.n	800525c <_free_r+0x6c>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	4401      	add	r1, r0
 8005248:	1850      	adds	r0, r2, r1
 800524a:	4283      	cmp	r3, r0
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	d1e0      	bne.n	8005212 <_free_r+0x22>
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	6053      	str	r3, [r2, #4]
 8005256:	4408      	add	r0, r1
 8005258:	6010      	str	r0, [r2, #0]
 800525a:	e7da      	b.n	8005212 <_free_r+0x22>
 800525c:	d902      	bls.n	8005264 <_free_r+0x74>
 800525e:	230c      	movs	r3, #12
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	e7d6      	b.n	8005212 <_free_r+0x22>
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	1821      	adds	r1, r4, r0
 8005268:	428b      	cmp	r3, r1
 800526a:	bf04      	itt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	bf04      	itt	eq
 8005274:	1809      	addeq	r1, r1, r0
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	6054      	str	r4, [r2, #4]
 800527a:	e7ca      	b.n	8005212 <_free_r+0x22>
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	200006e8 	.word	0x200006e8

08005284 <sbrk_aligned>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4e0f      	ldr	r6, [pc, #60]	@ (80052c4 <sbrk_aligned+0x40>)
 8005288:	460c      	mov	r4, r1
 800528a:	6831      	ldr	r1, [r6, #0]
 800528c:	4605      	mov	r5, r0
 800528e:	b911      	cbnz	r1, 8005296 <sbrk_aligned+0x12>
 8005290:	f000 fba6 	bl	80059e0 <_sbrk_r>
 8005294:	6030      	str	r0, [r6, #0]
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fba1 	bl	80059e0 <_sbrk_r>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d103      	bne.n	80052aa <sbrk_aligned+0x26>
 80052a2:	f04f 34ff 	mov.w	r4, #4294967295
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	1cc4      	adds	r4, r0, #3
 80052ac:	f024 0403 	bic.w	r4, r4, #3
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d0f8      	beq.n	80052a6 <sbrk_aligned+0x22>
 80052b4:	1a21      	subs	r1, r4, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fb92 	bl	80059e0 <_sbrk_r>
 80052bc:	3001      	adds	r0, #1
 80052be:	d1f2      	bne.n	80052a6 <sbrk_aligned+0x22>
 80052c0:	e7ef      	b.n	80052a2 <sbrk_aligned+0x1e>
 80052c2:	bf00      	nop
 80052c4:	200006e4 	.word	0x200006e4

080052c8 <_malloc_r>:
 80052c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052cc:	1ccd      	adds	r5, r1, #3
 80052ce:	f025 0503 	bic.w	r5, r5, #3
 80052d2:	3508      	adds	r5, #8
 80052d4:	2d0c      	cmp	r5, #12
 80052d6:	bf38      	it	cc
 80052d8:	250c      	movcc	r5, #12
 80052da:	2d00      	cmp	r5, #0
 80052dc:	4606      	mov	r6, r0
 80052de:	db01      	blt.n	80052e4 <_malloc_r+0x1c>
 80052e0:	42a9      	cmp	r1, r5
 80052e2:	d904      	bls.n	80052ee <_malloc_r+0x26>
 80052e4:	230c      	movs	r3, #12
 80052e6:	6033      	str	r3, [r6, #0]
 80052e8:	2000      	movs	r0, #0
 80052ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053c4 <_malloc_r+0xfc>
 80052f2:	f000 f869 	bl	80053c8 <__malloc_lock>
 80052f6:	f8d8 3000 	ldr.w	r3, [r8]
 80052fa:	461c      	mov	r4, r3
 80052fc:	bb44      	cbnz	r4, 8005350 <_malloc_r+0x88>
 80052fe:	4629      	mov	r1, r5
 8005300:	4630      	mov	r0, r6
 8005302:	f7ff ffbf 	bl	8005284 <sbrk_aligned>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	4604      	mov	r4, r0
 800530a:	d158      	bne.n	80053be <_malloc_r+0xf6>
 800530c:	f8d8 4000 	ldr.w	r4, [r8]
 8005310:	4627      	mov	r7, r4
 8005312:	2f00      	cmp	r7, #0
 8005314:	d143      	bne.n	800539e <_malloc_r+0xd6>
 8005316:	2c00      	cmp	r4, #0
 8005318:	d04b      	beq.n	80053b2 <_malloc_r+0xea>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	4639      	mov	r1, r7
 800531e:	4630      	mov	r0, r6
 8005320:	eb04 0903 	add.w	r9, r4, r3
 8005324:	f000 fb5c 	bl	80059e0 <_sbrk_r>
 8005328:	4581      	cmp	r9, r0
 800532a:	d142      	bne.n	80053b2 <_malloc_r+0xea>
 800532c:	6821      	ldr	r1, [r4, #0]
 800532e:	1a6d      	subs	r5, r5, r1
 8005330:	4629      	mov	r1, r5
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff ffa6 	bl	8005284 <sbrk_aligned>
 8005338:	3001      	adds	r0, #1
 800533a:	d03a      	beq.n	80053b2 <_malloc_r+0xea>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	442b      	add	r3, r5
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	f8d8 3000 	ldr.w	r3, [r8]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	bb62      	cbnz	r2, 80053a4 <_malloc_r+0xdc>
 800534a:	f8c8 7000 	str.w	r7, [r8]
 800534e:	e00f      	b.n	8005370 <_malloc_r+0xa8>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	1b52      	subs	r2, r2, r5
 8005354:	d420      	bmi.n	8005398 <_malloc_r+0xd0>
 8005356:	2a0b      	cmp	r2, #11
 8005358:	d917      	bls.n	800538a <_malloc_r+0xc2>
 800535a:	1961      	adds	r1, r4, r5
 800535c:	42a3      	cmp	r3, r4
 800535e:	6025      	str	r5, [r4, #0]
 8005360:	bf18      	it	ne
 8005362:	6059      	strne	r1, [r3, #4]
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	bf08      	it	eq
 8005368:	f8c8 1000 	streq.w	r1, [r8]
 800536c:	5162      	str	r2, [r4, r5]
 800536e:	604b      	str	r3, [r1, #4]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 f82f 	bl	80053d4 <__malloc_unlock>
 8005376:	f104 000b 	add.w	r0, r4, #11
 800537a:	1d23      	adds	r3, r4, #4
 800537c:	f020 0007 	bic.w	r0, r0, #7
 8005380:	1ac2      	subs	r2, r0, r3
 8005382:	bf1c      	itt	ne
 8005384:	1a1b      	subne	r3, r3, r0
 8005386:	50a3      	strne	r3, [r4, r2]
 8005388:	e7af      	b.n	80052ea <_malloc_r+0x22>
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	42a3      	cmp	r3, r4
 800538e:	bf0c      	ite	eq
 8005390:	f8c8 2000 	streq.w	r2, [r8]
 8005394:	605a      	strne	r2, [r3, #4]
 8005396:	e7eb      	b.n	8005370 <_malloc_r+0xa8>
 8005398:	4623      	mov	r3, r4
 800539a:	6864      	ldr	r4, [r4, #4]
 800539c:	e7ae      	b.n	80052fc <_malloc_r+0x34>
 800539e:	463c      	mov	r4, r7
 80053a0:	687f      	ldr	r7, [r7, #4]
 80053a2:	e7b6      	b.n	8005312 <_malloc_r+0x4a>
 80053a4:	461a      	mov	r2, r3
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d1fb      	bne.n	80053a4 <_malloc_r+0xdc>
 80053ac:	2300      	movs	r3, #0
 80053ae:	6053      	str	r3, [r2, #4]
 80053b0:	e7de      	b.n	8005370 <_malloc_r+0xa8>
 80053b2:	230c      	movs	r3, #12
 80053b4:	6033      	str	r3, [r6, #0]
 80053b6:	4630      	mov	r0, r6
 80053b8:	f000 f80c 	bl	80053d4 <__malloc_unlock>
 80053bc:	e794      	b.n	80052e8 <_malloc_r+0x20>
 80053be:	6005      	str	r5, [r0, #0]
 80053c0:	e7d6      	b.n	8005370 <_malloc_r+0xa8>
 80053c2:	bf00      	nop
 80053c4:	200006e8 	.word	0x200006e8

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	@ (80053d0 <__malloc_lock+0x8>)
 80053ca:	f7ff bf0f 	b.w	80051ec <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	200006e0 	.word	0x200006e0

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	@ (80053dc <__malloc_unlock+0x8>)
 80053d6:	f7ff bf0a 	b.w	80051ee <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	200006e0 	.word	0x200006e0

080053e0 <__ssputs_r>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	688e      	ldr	r6, [r1, #8]
 80053e6:	461f      	mov	r7, r3
 80053e8:	42be      	cmp	r6, r7
 80053ea:	680b      	ldr	r3, [r1, #0]
 80053ec:	4682      	mov	sl, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4690      	mov	r8, r2
 80053f2:	d82d      	bhi.n	8005450 <__ssputs_r+0x70>
 80053f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053fc:	d026      	beq.n	800544c <__ssputs_r+0x6c>
 80053fe:	6965      	ldr	r5, [r4, #20]
 8005400:	6909      	ldr	r1, [r1, #16]
 8005402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005406:	eba3 0901 	sub.w	r9, r3, r1
 800540a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800540e:	1c7b      	adds	r3, r7, #1
 8005410:	444b      	add	r3, r9
 8005412:	106d      	asrs	r5, r5, #1
 8005414:	429d      	cmp	r5, r3
 8005416:	bf38      	it	cc
 8005418:	461d      	movcc	r5, r3
 800541a:	0553      	lsls	r3, r2, #21
 800541c:	d527      	bpl.n	800546e <__ssputs_r+0x8e>
 800541e:	4629      	mov	r1, r5
 8005420:	f7ff ff52 	bl	80052c8 <_malloc_r>
 8005424:	4606      	mov	r6, r0
 8005426:	b360      	cbz	r0, 8005482 <__ssputs_r+0xa2>
 8005428:	6921      	ldr	r1, [r4, #16]
 800542a:	464a      	mov	r2, r9
 800542c:	f000 fae8 	bl	8005a00 <memcpy>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	6126      	str	r6, [r4, #16]
 800543e:	6165      	str	r5, [r4, #20]
 8005440:	444e      	add	r6, r9
 8005442:	eba5 0509 	sub.w	r5, r5, r9
 8005446:	6026      	str	r6, [r4, #0]
 8005448:	60a5      	str	r5, [r4, #8]
 800544a:	463e      	mov	r6, r7
 800544c:	42be      	cmp	r6, r7
 800544e:	d900      	bls.n	8005452 <__ssputs_r+0x72>
 8005450:	463e      	mov	r6, r7
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	4632      	mov	r2, r6
 8005456:	4641      	mov	r1, r8
 8005458:	f000 faa8 	bl	80059ac <memmove>
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	1b9b      	subs	r3, r3, r6
 8005460:	60a3      	str	r3, [r4, #8]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	4433      	add	r3, r6
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	2000      	movs	r0, #0
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	462a      	mov	r2, r5
 8005470:	f000 fad4 	bl	8005a1c <_realloc_r>
 8005474:	4606      	mov	r6, r0
 8005476:	2800      	cmp	r0, #0
 8005478:	d1e0      	bne.n	800543c <__ssputs_r+0x5c>
 800547a:	6921      	ldr	r1, [r4, #16]
 800547c:	4650      	mov	r0, sl
 800547e:	f7ff feb7 	bl	80051f0 <_free_r>
 8005482:	230c      	movs	r3, #12
 8005484:	f8ca 3000 	str.w	r3, [sl]
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	e7e9      	b.n	800546a <__ssputs_r+0x8a>
	...

08005498 <_svfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4698      	mov	r8, r3
 800549e:	898b      	ldrh	r3, [r1, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	b09d      	sub	sp, #116	@ 0x74
 80054a4:	4607      	mov	r7, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	d510      	bpl.n	80054ce <_svfiprintf_r+0x36>
 80054ac:	690b      	ldr	r3, [r1, #16]
 80054ae:	b973      	cbnz	r3, 80054ce <_svfiprintf_r+0x36>
 80054b0:	2140      	movs	r1, #64	@ 0x40
 80054b2:	f7ff ff09 	bl	80052c8 <_malloc_r>
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	6128      	str	r0, [r5, #16]
 80054ba:	b930      	cbnz	r0, 80054ca <_svfiprintf_r+0x32>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	b01d      	add	sp, #116	@ 0x74
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	616b      	str	r3, [r5, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054d2:	2320      	movs	r3, #32
 80054d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054dc:	2330      	movs	r3, #48	@ 0x30
 80054de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800567c <_svfiprintf_r+0x1e4>
 80054e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054e6:	f04f 0901 	mov.w	r9, #1
 80054ea:	4623      	mov	r3, r4
 80054ec:	469a      	mov	sl, r3
 80054ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f2:	b10a      	cbz	r2, 80054f8 <_svfiprintf_r+0x60>
 80054f4:	2a25      	cmp	r2, #37	@ 0x25
 80054f6:	d1f9      	bne.n	80054ec <_svfiprintf_r+0x54>
 80054f8:	ebba 0b04 	subs.w	fp, sl, r4
 80054fc:	d00b      	beq.n	8005516 <_svfiprintf_r+0x7e>
 80054fe:	465b      	mov	r3, fp
 8005500:	4622      	mov	r2, r4
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff6b 	bl	80053e0 <__ssputs_r>
 800550a:	3001      	adds	r0, #1
 800550c:	f000 80a7 	beq.w	800565e <_svfiprintf_r+0x1c6>
 8005510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005512:	445a      	add	r2, fp
 8005514:	9209      	str	r2, [sp, #36]	@ 0x24
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 809f 	beq.w	800565e <_svfiprintf_r+0x1c6>
 8005520:	2300      	movs	r3, #0
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800552a:	f10a 0a01 	add.w	sl, sl, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	9307      	str	r3, [sp, #28]
 8005532:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005536:	931a      	str	r3, [sp, #104]	@ 0x68
 8005538:	4654      	mov	r4, sl
 800553a:	2205      	movs	r2, #5
 800553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005540:	484e      	ldr	r0, [pc, #312]	@ (800567c <_svfiprintf_r+0x1e4>)
 8005542:	f7fa fe55 	bl	80001f0 <memchr>
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	b9d8      	cbnz	r0, 8005582 <_svfiprintf_r+0xea>
 800554a:	06d0      	lsls	r0, r2, #27
 800554c:	bf44      	itt	mi
 800554e:	2320      	movmi	r3, #32
 8005550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005554:	0711      	lsls	r1, r2, #28
 8005556:	bf44      	itt	mi
 8005558:	232b      	movmi	r3, #43	@ 0x2b
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800555e:	f89a 3000 	ldrb.w	r3, [sl]
 8005562:	2b2a      	cmp	r3, #42	@ 0x2a
 8005564:	d015      	beq.n	8005592 <_svfiprintf_r+0xfa>
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	4654      	mov	r4, sl
 800556a:	2000      	movs	r0, #0
 800556c:	f04f 0c0a 	mov.w	ip, #10
 8005570:	4621      	mov	r1, r4
 8005572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005576:	3b30      	subs	r3, #48	@ 0x30
 8005578:	2b09      	cmp	r3, #9
 800557a:	d94b      	bls.n	8005614 <_svfiprintf_r+0x17c>
 800557c:	b1b0      	cbz	r0, 80055ac <_svfiprintf_r+0x114>
 800557e:	9207      	str	r2, [sp, #28]
 8005580:	e014      	b.n	80055ac <_svfiprintf_r+0x114>
 8005582:	eba0 0308 	sub.w	r3, r0, r8
 8005586:	fa09 f303 	lsl.w	r3, r9, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	46a2      	mov	sl, r4
 8005590:	e7d2      	b.n	8005538 <_svfiprintf_r+0xa0>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	9103      	str	r1, [sp, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfbb      	ittet	lt
 800559e:	425b      	neglt	r3, r3
 80055a0:	f042 0202 	orrlt.w	r2, r2, #2
 80055a4:	9307      	strge	r3, [sp, #28]
 80055a6:	9307      	strlt	r3, [sp, #28]
 80055a8:	bfb8      	it	lt
 80055aa:	9204      	strlt	r2, [sp, #16]
 80055ac:	7823      	ldrb	r3, [r4, #0]
 80055ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80055b0:	d10a      	bne.n	80055c8 <_svfiprintf_r+0x130>
 80055b2:	7863      	ldrb	r3, [r4, #1]
 80055b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80055b6:	d132      	bne.n	800561e <_svfiprintf_r+0x186>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9203      	str	r2, [sp, #12]
 80055c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055c4:	3402      	adds	r4, #2
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800568c <_svfiprintf_r+0x1f4>
 80055cc:	7821      	ldrb	r1, [r4, #0]
 80055ce:	2203      	movs	r2, #3
 80055d0:	4650      	mov	r0, sl
 80055d2:	f7fa fe0d 	bl	80001f0 <memchr>
 80055d6:	b138      	cbz	r0, 80055e8 <_svfiprintf_r+0x150>
 80055d8:	9b04      	ldr	r3, [sp, #16]
 80055da:	eba0 000a 	sub.w	r0, r0, sl
 80055de:	2240      	movs	r2, #64	@ 0x40
 80055e0:	4082      	lsls	r2, r0
 80055e2:	4313      	orrs	r3, r2
 80055e4:	3401      	adds	r4, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	4824      	ldr	r0, [pc, #144]	@ (8005680 <_svfiprintf_r+0x1e8>)
 80055ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055f2:	2206      	movs	r2, #6
 80055f4:	f7fa fdfc 	bl	80001f0 <memchr>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d036      	beq.n	800566a <_svfiprintf_r+0x1d2>
 80055fc:	4b21      	ldr	r3, [pc, #132]	@ (8005684 <_svfiprintf_r+0x1ec>)
 80055fe:	bb1b      	cbnz	r3, 8005648 <_svfiprintf_r+0x1b0>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	3307      	adds	r3, #7
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	3308      	adds	r3, #8
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800560e:	4433      	add	r3, r6
 8005610:	9309      	str	r3, [sp, #36]	@ 0x24
 8005612:	e76a      	b.n	80054ea <_svfiprintf_r+0x52>
 8005614:	fb0c 3202 	mla	r2, ip, r2, r3
 8005618:	460c      	mov	r4, r1
 800561a:	2001      	movs	r0, #1
 800561c:	e7a8      	b.n	8005570 <_svfiprintf_r+0xd8>
 800561e:	2300      	movs	r3, #0
 8005620:	3401      	adds	r4, #1
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	4619      	mov	r1, r3
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4620      	mov	r0, r4
 800562c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005630:	3a30      	subs	r2, #48	@ 0x30
 8005632:	2a09      	cmp	r2, #9
 8005634:	d903      	bls.n	800563e <_svfiprintf_r+0x1a6>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c6      	beq.n	80055c8 <_svfiprintf_r+0x130>
 800563a:	9105      	str	r1, [sp, #20]
 800563c:	e7c4      	b.n	80055c8 <_svfiprintf_r+0x130>
 800563e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	e7f0      	b.n	800562a <_svfiprintf_r+0x192>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462a      	mov	r2, r5
 800564e:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <_svfiprintf_r+0x1f0>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	4638      	mov	r0, r7
 8005654:	f3af 8000 	nop.w
 8005658:	1c42      	adds	r2, r0, #1
 800565a:	4606      	mov	r6, r0
 800565c:	d1d6      	bne.n	800560c <_svfiprintf_r+0x174>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	065b      	lsls	r3, r3, #25
 8005662:	f53f af2d 	bmi.w	80054c0 <_svfiprintf_r+0x28>
 8005666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005668:	e72c      	b.n	80054c4 <_svfiprintf_r+0x2c>
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	462a      	mov	r2, r5
 8005670:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <_svfiprintf_r+0x1f0>)
 8005672:	a904      	add	r1, sp, #16
 8005674:	4638      	mov	r0, r7
 8005676:	f000 f879 	bl	800576c <_printf_i>
 800567a:	e7ed      	b.n	8005658 <_svfiprintf_r+0x1c0>
 800567c:	08006860 	.word	0x08006860
 8005680:	0800686a 	.word	0x0800686a
 8005684:	00000000 	.word	0x00000000
 8005688:	080053e1 	.word	0x080053e1
 800568c:	08006866 	.word	0x08006866

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4698      	mov	r8, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	3b00      	subs	r3, #0
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056ec:	4641      	mov	r1, r8
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c8      	blx	r9
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6922      	ldr	r2, [r4, #16]
 80056fa:	f003 0306 	and.w	r3, r3, #6
 80056fe:	2b04      	cmp	r3, #4
 8005700:	bf02      	ittt	eq
 8005702:	68e5      	ldreq	r5, [r4, #12]
 8005704:	6833      	ldreq	r3, [r6, #0]
 8005706:	1aed      	subeq	r5, r5, r3
 8005708:	68a3      	ldr	r3, [r4, #8]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4641      	mov	r1, r8
 800572c:	4638      	mov	r0, r7
 800572e:	47c8      	blx	r9
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	@ 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4641      	mov	r1, r8
 800575e:	4638      	mov	r0, r7
 8005760:	47c8      	blx	r9
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005774:	2f78      	cmp	r7, #120	@ 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	@ 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d2 	beq.w	8005932 <_printf_i+0x1c6>
 800578e:	2f58      	cmp	r7, #88	@ 0x58
 8005790:	f000 80b9 	beq.w	8005906 <_printf_i+0x19a>
 8005794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	@ (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005919 	.word	0x08005919
 80057dc:	08005843 	.word	0x08005843
 80057e0:	080058d3 	.word	0x080058d3
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	0800593b 	.word	0x0800593b
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005843 	.word	0x08005843
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	080058db 	.word	0x080058db
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6032      	str	r2, [r6, #0]
 800580c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e09d      	b.n	8005954 <_printf_i+0x1e8>
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	1d19      	adds	r1, r3, #4
 800581e:	6031      	str	r1, [r6, #0]
 8005820:	0606      	lsls	r6, r0, #24
 8005822:	d501      	bpl.n	8005828 <_printf_i+0xbc>
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	e003      	b.n	8005830 <_printf_i+0xc4>
 8005828:	0645      	lsls	r5, r0, #25
 800582a:	d5fb      	bpl.n	8005824 <_printf_i+0xb8>
 800582c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005830:	2d00      	cmp	r5, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xd0>
 8005834:	232d      	movs	r3, #45	@ 0x2d
 8005836:	426d      	negs	r5, r5
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583c:	4859      	ldr	r0, [pc, #356]	@ (80059a4 <_printf_i+0x238>)
 800583e:	230a      	movs	r3, #10
 8005840:	e011      	b.n	8005866 <_printf_i+0xfa>
 8005842:	6821      	ldr	r1, [r4, #0]
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	0608      	lsls	r0, r1, #24
 8005848:	f853 5b04 	ldr.w	r5, [r3], #4
 800584c:	d402      	bmi.n	8005854 <_printf_i+0xe8>
 800584e:	0649      	lsls	r1, r1, #25
 8005850:	bf48      	it	mi
 8005852:	b2ad      	uxthmi	r5, r5
 8005854:	2f6f      	cmp	r7, #111	@ 0x6f
 8005856:	4853      	ldr	r0, [pc, #332]	@ (80059a4 <_printf_i+0x238>)
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	bf14      	ite	ne
 800585c:	230a      	movne	r3, #10
 800585e:	2308      	moveq	r3, #8
 8005860:	2100      	movs	r1, #0
 8005862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005866:	6866      	ldr	r6, [r4, #4]
 8005868:	60a6      	str	r6, [r4, #8]
 800586a:	2e00      	cmp	r6, #0
 800586c:	bfa2      	ittt	ge
 800586e:	6821      	ldrge	r1, [r4, #0]
 8005870:	f021 0104 	bicge.w	r1, r1, #4
 8005874:	6021      	strge	r1, [r4, #0]
 8005876:	b90d      	cbnz	r5, 800587c <_printf_i+0x110>
 8005878:	2e00      	cmp	r6, #0
 800587a:	d04b      	beq.n	8005914 <_printf_i+0x1a8>
 800587c:	4616      	mov	r6, r2
 800587e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005882:	fb03 5711 	mls	r7, r3, r1, r5
 8005886:	5dc7      	ldrb	r7, [r0, r7]
 8005888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800588c:	462f      	mov	r7, r5
 800588e:	42bb      	cmp	r3, r7
 8005890:	460d      	mov	r5, r1
 8005892:	d9f4      	bls.n	800587e <_printf_i+0x112>
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10b      	bne.n	80058b0 <_printf_i+0x144>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07df      	lsls	r7, r3, #31
 800589c:	d508      	bpl.n	80058b0 <_printf_i+0x144>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4299      	cmp	r1, r3
 80058a4:	bfde      	ittt	le
 80058a6:	2330      	movle	r3, #48	@ 0x30
 80058a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058b0:	1b92      	subs	r2, r2, r6
 80058b2:	6122      	str	r2, [r4, #16]
 80058b4:	f8cd a000 	str.w	sl, [sp]
 80058b8:	464b      	mov	r3, r9
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fee6 	bl	8005690 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14a      	bne.n	800595e <_printf_i+0x1f2>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f043 0320 	orr.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	4833      	ldr	r0, [pc, #204]	@ (80059a8 <_printf_i+0x23c>)
 80058dc:	2778      	movs	r7, #120	@ 0x78
 80058de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	6831      	ldr	r1, [r6, #0]
 80058e6:	061f      	lsls	r7, r3, #24
 80058e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80058ec:	d402      	bmi.n	80058f4 <_printf_i+0x188>
 80058ee:	065f      	lsls	r7, r3, #25
 80058f0:	bf48      	it	mi
 80058f2:	b2ad      	uxthmi	r5, r5
 80058f4:	6031      	str	r1, [r6, #0]
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	bf44      	itt	mi
 80058fa:	f043 0320 	orrmi.w	r3, r3, #32
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b11d      	cbz	r5, 800590a <_printf_i+0x19e>
 8005902:	2310      	movs	r3, #16
 8005904:	e7ac      	b.n	8005860 <_printf_i+0xf4>
 8005906:	4827      	ldr	r0, [pc, #156]	@ (80059a4 <_printf_i+0x238>)
 8005908:	e7e9      	b.n	80058de <_printf_i+0x172>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	f023 0320 	bic.w	r3, r3, #32
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	e7f6      	b.n	8005902 <_printf_i+0x196>
 8005914:	4616      	mov	r6, r2
 8005916:	e7bd      	b.n	8005894 <_printf_i+0x128>
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	6825      	ldr	r5, [r4, #0]
 800591c:	6961      	ldr	r1, [r4, #20]
 800591e:	1d18      	adds	r0, r3, #4
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	062e      	lsls	r6, r5, #24
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	d501      	bpl.n	800592c <_printf_i+0x1c0>
 8005928:	6019      	str	r1, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0x1c6>
 800592c:	0668      	lsls	r0, r5, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0x1bc>
 8005930:	8019      	strh	r1, [r3, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	4616      	mov	r6, r2
 8005938:	e7bc      	b.n	80058b4 <_printf_i+0x148>
 800593a:	6833      	ldr	r3, [r6, #0]
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	6032      	str	r2, [r6, #0]
 8005940:	681e      	ldr	r6, [r3, #0]
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	2100      	movs	r1, #0
 8005946:	4630      	mov	r0, r6
 8005948:	f7fa fc52 	bl	80001f0 <memchr>
 800594c:	b108      	cbz	r0, 8005952 <_printf_i+0x1e6>
 800594e:	1b80      	subs	r0, r0, r6
 8005950:	6060      	str	r0, [r4, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800595c:	e7aa      	b.n	80058b4 <_printf_i+0x148>
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	4632      	mov	r2, r6
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d0ad      	beq.n	80058c8 <_printf_i+0x15c>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	079b      	lsls	r3, r3, #30
 8005970:	d413      	bmi.n	800599a <_printf_i+0x22e>
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	4298      	cmp	r0, r3
 8005978:	bfb8      	it	lt
 800597a:	4618      	movlt	r0, r3
 800597c:	e7a6      	b.n	80058cc <_printf_i+0x160>
 800597e:	2301      	movs	r3, #1
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d09d      	beq.n	80058c8 <_printf_i+0x15c>
 800598c:	3501      	adds	r5, #1
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	9903      	ldr	r1, [sp, #12]
 8005992:	1a5b      	subs	r3, r3, r1
 8005994:	42ab      	cmp	r3, r5
 8005996:	dcf2      	bgt.n	800597e <_printf_i+0x212>
 8005998:	e7eb      	b.n	8005972 <_printf_i+0x206>
 800599a:	2500      	movs	r5, #0
 800599c:	f104 0619 	add.w	r6, r4, #25
 80059a0:	e7f5      	b.n	800598e <_printf_i+0x222>
 80059a2:	bf00      	nop
 80059a4:	08006871 	.word	0x08006871
 80059a8:	08006882 	.word	0x08006882

080059ac <memmove>:
 80059ac:	4288      	cmp	r0, r1
 80059ae:	b510      	push	{r4, lr}
 80059b0:	eb01 0402 	add.w	r4, r1, r2
 80059b4:	d902      	bls.n	80059bc <memmove+0x10>
 80059b6:	4284      	cmp	r4, r0
 80059b8:	4623      	mov	r3, r4
 80059ba:	d807      	bhi.n	80059cc <memmove+0x20>
 80059bc:	1e43      	subs	r3, r0, #1
 80059be:	42a1      	cmp	r1, r4
 80059c0:	d008      	beq.n	80059d4 <memmove+0x28>
 80059c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ca:	e7f8      	b.n	80059be <memmove+0x12>
 80059cc:	4402      	add	r2, r0
 80059ce:	4601      	mov	r1, r0
 80059d0:	428a      	cmp	r2, r1
 80059d2:	d100      	bne.n	80059d6 <memmove+0x2a>
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059de:	e7f7      	b.n	80059d0 <memmove+0x24>

080059e0 <_sbrk_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	@ (80059fc <_sbrk_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fc f9ca 	bl	8001d84 <_sbrk>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_sbrk_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_sbrk_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200006dc 	.word	0x200006dc

08005a00 <memcpy>:
 8005a00:	440a      	add	r2, r1
 8005a02:	4291      	cmp	r1, r2
 8005a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a08:	d100      	bne.n	8005a0c <memcpy+0xc>
 8005a0a:	4770      	bx	lr
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a16:	4291      	cmp	r1, r2
 8005a18:	d1f9      	bne.n	8005a0e <memcpy+0xe>
 8005a1a:	bd10      	pop	{r4, pc}

08005a1c <_realloc_r>:
 8005a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a20:	4680      	mov	r8, r0
 8005a22:	4615      	mov	r5, r2
 8005a24:	460c      	mov	r4, r1
 8005a26:	b921      	cbnz	r1, 8005a32 <_realloc_r+0x16>
 8005a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	f7ff bc4b 	b.w	80052c8 <_malloc_r>
 8005a32:	b92a      	cbnz	r2, 8005a40 <_realloc_r+0x24>
 8005a34:	f7ff fbdc 	bl	80051f0 <_free_r>
 8005a38:	2400      	movs	r4, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a40:	f000 f81a 	bl	8005a78 <_malloc_usable_size_r>
 8005a44:	4285      	cmp	r5, r0
 8005a46:	4606      	mov	r6, r0
 8005a48:	d802      	bhi.n	8005a50 <_realloc_r+0x34>
 8005a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a4e:	d8f4      	bhi.n	8005a3a <_realloc_r+0x1e>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fc38 	bl	80052c8 <_malloc_r>
 8005a58:	4607      	mov	r7, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d0ec      	beq.n	8005a38 <_realloc_r+0x1c>
 8005a5e:	42b5      	cmp	r5, r6
 8005a60:	462a      	mov	r2, r5
 8005a62:	4621      	mov	r1, r4
 8005a64:	bf28      	it	cs
 8005a66:	4632      	movcs	r2, r6
 8005a68:	f7ff ffca 	bl	8005a00 <memcpy>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f7ff fbbe 	bl	80051f0 <_free_r>
 8005a74:	463c      	mov	r4, r7
 8005a76:	e7e0      	b.n	8005a3a <_realloc_r+0x1e>

08005a78 <_malloc_usable_size_r>:
 8005a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7c:	1f18      	subs	r0, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbc      	itt	lt
 8005a82:	580b      	ldrlt	r3, [r1, r0]
 8005a84:	18c0      	addlt	r0, r0, r3
 8005a86:	4770      	bx	lr

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
